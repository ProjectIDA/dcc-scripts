#!/usr/bin/env python

import os
import argparse
import shutil

from numpy import pi, cos, sin, multiply
import matplotlib
matplotlib.use('Qt4Agg')
import matplotlib.pyplot as plt

# os.environ['IDA_CAL_RAW_DIR'] = '/Users/dauerbach/dev/dcc/dcc-scripts/testtree'
# os.environ['IDA_RESPONSES_NOM_DIR'] = '/Users/dauerbach/dev/dcc/dcc-modules-py'

from ida.instruments import CALTYPE_RBLF, CALTYPE_RBHF
from ida.calibration.cal_info import CalInfo
from ida.calibration.process import process_cal_component, analyze_cal_component
from ida.calibration.cross import cross_correlate
from ida.calibration.plots import cross_tf_plot

version = '0.1'

parser = argparse.ArgumentParser(description="Process random binary calibration data acquired by qcal.")
parser.add_argument('-b', '--batch', help='run in batrch mode', action='store_true')
parser.add_argument('-v', '--version', action='version', version=version)
parser.add_argument('staloc', help="IDA Station + loc code (for example: pfo00)", nargs='?', default='')
parser.add_argument('sensor', help="Sensor model", nargs='?', default='')
parser.add_argument('comp', help="Component", nargs='?', default='')
parser.add_argument('chan', help="Channel Code", nargs='?', default='')
parser.add_argument('lfdate', help="Low Freq cal date (yyyy-mm-dd)", nargs='?', default='')
parser.add_argument('hfdate', help="High Freq cal date (yyyy-mm-dd)", nargs='?', default='')

# for non-idadcc execution
# parser.add_argument('-d', '--datadir', help='Data Directory containing LF and HF idacal/qcal miniseed and log files.')
# parser.add_argument('-r', '--response', help='IDA format poles/zeros sensor response file')

args = parser.parse_args()

ci = CalInfo(os.environ['IDA_CAL_RAW_DIR'], # getenv('IDA_CAL_RAW_DIR'),
             '',    # getenv('IDA_RESPONSE_CUR_DIR'),
             os.environ['IDA_RESPONSES_NOM_DIR']
             )

if args.staloc:
    ci.staloc = args.staloc
if args.sensor:
    ci.sensor = args.sensor
if args.comp:
    ci.comp = args.comp
if args.chan:
    ci.chan = args.chan
if args.lfdate:
    ci.lfdate = args.lfdate
if args.hfdate:
    ci.hfdate = args.hfdate

# ci.print_info()

if ci.collect():

    samp_rate_lf, lf_start_time, lfinput, lfmeas, \
        samp_rate_hf, hf_start_time, hfinput, hfmeas, \
        freqs_lf, freqs_hf = process_cal_component(ci)

    lftf_f, lftf_amp, lftf_pha, lftf_coh = cross_correlate(samp_rate_lf, lfinput, lfmeas)
    hftf_f, hftf_amp, hftf_pha, hftf_coh = cross_correlate(samp_rate_hf, hfinput, hfmeas)

    plt.ion()
    tol_limits = (1.0, 1.0, 1.0)  # (amp_pcnt, pha_deg, coh)
    lf_fig = cross_tf_plot(ci.sta, ci.loc, ci.chan, ci.sensor, ci.lfdate, CALTYPE_RBLF,
                           samp_rate_lf, lftf_f, lftf_amp, lftf_pha, lftf_coh,
                           tolerance_limits=tol_limits)
    hf_fig = cross_tf_plot(ci.sta, ci.loc, ci.chan, ci.sensor, ci.hfdate, CALTYPE_RBHF,
                           ci.opsr, hftf_f, hftf_amp, hftf_pha, hftf_coh,
                           tolerance_limits=tol_limits)

    output_path = os.path.join(os.environ['IDA_CAL_ANALYSIS_DIR'],
                               ci.staloc, ci.lfdate)
    if not os.path.exists(output_path):
        os.makedirs(output_path, exist_ok=True)

    shutil.copy2(ci.respfn, output_path)
    lf_fig.savefig(os.path.join(output_path, 'cross_lf_plot_start.png'), dpi=400)
    hf_fig.savefig(os.path.join(output_path, 'cross_hf_plot_start.png'), dpi=400)

    doit = input('Fit a new response (y/n):')

    if doit.upper() == 'Y':

        lftf_pha_rad = lftf_pha * pi / 180
        hftf_pha_rad = hftf_pha * pi / 180

        # create complex TF
        hftf = multiply(hftf_amp, (cos(hftf_pha_rad) + 1j * sin(hftf_pha_rad)))
        lftf = multiply(lftf_amp, (cos(lftf_pha_rad) + 1j * sin(lftf_pha_rad)))

        new_paz = analyze_cal_component(ci, lftf_f, lftf, hftf_f, hftf,
                                        samp_rate_lf, lfinput, lfmeas,
                                        samp_rate_hf, hfinput, hfmeas)

        ci.fullpaz = new_paz

        samp_rate_lf, lf_start_time, lfinput, lfmeas, \
        samp_rate_hf, hf_start_time, hfinput, hfmeas, \
        freqs_lf, freqs_hf = process_cal_component(ci)

        lftf_f, lftf_amp, lftf_pha, lftf_coh = cross_correlate(samp_rate_lf, lfinput, lfmeas)
        hftf_f, hftf_amp, hftf_pha, hftf_coh = cross_correlate(samp_rate_hf, hfinput, hfmeas)

        plt.ion()
        lf_fig = cross_tf_plot(ci.sta, ci.loc, ci.chan, ci.sensor, ci.lfdate, CALTYPE_RBLF,
                               samp_rate_lf, lftf_f, lftf_amp, lftf_pha, lftf_coh,
                               tolerance_limits=tol_limits)
        hf_fig = cross_tf_plot(ci.sta, ci.loc, ci.chan, ci.sensor, ci.hfdate, CALTYPE_RBHF,
                               ci.opsr, hftf_f, hftf_amp, hftf_pha, hftf_coh,
                               tolerance_limits=tol_limits)

        lf_fig.savefig(os.path.join(output_path, 'cross_lf_plot_fit.png'), dpi=400)
        hf_fig.savefig(os.path.join(output_path, 'cross_hf_plot_fit.png'), dpi=400)

        new_paz.save(os.path.join(output_path, ci.new_resp_filename_stem() + '.ipaz'))

        input('Hit enter to finish')
