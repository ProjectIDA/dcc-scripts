#!/usr/bin/python3

import os
from pathlib import Path
import argparse
from sys import exit
from ida.utils import pick, pick2, select_perturb_map
from ida.calibration import utils
from ida.db.io import read
from ida.db.query import find_sensor_file
from ida import IDA_RESPONSES_CUR_DIR, IDA_RESPONSES_NOM_DIR
from ida.system import nom_resp_for_model, local_resp_files
from ida.signals.paz import PAZ
VERSION = '0.1'

# raw_root_dir = os.environ.get('IDA_CAL_RAW_DIR')
# ana_root_dir = os.environ.get('IDA_CAL_ANALYSIS_DIR')

parser = argparse.ArgumentParser(description="Process random binary calibration data acquired by qcal.")
parser.add_argument("station", help="IDA Station code")

parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + VERSION)

args = parser.parse_args()
station = args.station.lower()

# success, infotpl = utils.select_raw_cal_info(station)
success, sta, loc, model, sendir = utils.select_raw_cal_sensor(station)

if not success:
    print('Unsuccessful')
    exit(1)
# print(success, sta, loc, model, sendir)

success, lf_date_str, lf_date_dir = utils.select_raw_cal_date(sendir, 'rblf')
if not success:
    print('Unsuccessful')
    exit(1)
# print(success, lf_date_str, lf_date_dir)

success, hf_date_str, hf_date_dir = utils.select_raw_cal_date(sendir, 'rbhf')
if not success:
    print('Unsuccessful')
    exit(1)
# print(success, hf_date_str, hf_date_dir)


success, rblf_files = utils.select_raw_cal_files(lf_date_dir)

if not rblf_files[0]:
    print('ERROR: NO MINISEED FILES FOUND IN RBLF DIRECTORY: ', lf_date_dir)
    exit(0)

if not success:
    print('quitter')
    exit(1)

success, rbhf_files = utils.select_raw_cal_files(hf_date_dir)

if not rbhf_files[0]:
    print('ERROR: NO MINISEED FILES FOUND IN RBHF DIRECTORY: ', hf_date_dir)
    exit(0)

if not success:
    print('quitter')
    exit(1)

print('\nRBLF File selected: {}'.format(rblf_files[0]))
print('RBHF File selected: {}'.format(rbhf_files[0]))

complist1 = ['Z', 'N', 'E']
grouplist = [complist1]
success, _, user_choice_groups = pick2(grouplist, 'Select Component to Process',
                                      prompt='Enter selection (or "q" to quit): ',
                                      implicit_quit_q=True, multiple_choice=False,
                                      menu_on_error=True, err_message='Invalid choice. Please try again')

if not success:
    exit(1)
# print('Pick2 results:')
# print('  success:', success)
# print('  user_choices:', user_choices)
# print('  user_choice_groups:', user_choice_groups)

# for k, v in user_choice_groups.items():
#     print('Component:', [grouplist[k][item] for item in v])

comp = grouplist[0][user_choice_groups[0][0]]
# print('Component:', comp)

print('\nReading IDA.stage...')
stage_df = read('datascope', 'stage')
sensor_fn_list = find_sensor_file(stage_df, sta, loc, comp, lf_date_str)
# print('Sta:  {}\nLoc:  {}\nComp: {}\nDate: {}\nResp: {}'.format(sta,loc,comp,lf_date_str, sensor_fn_list[0]))

# print('NOM Resp for model:', model)
# print('Search path:', os.path.join(IDA_RESPONSES_NOM_DIR, (model+'*').lower()))
nom_resps = nom_resp_for_model(model)
nom_resps_names = [Path(respfn).name for respfn in nom_resps]
# print(nom_resps)
local_resp = local_resp_files()
local_resp_names = [Path(respfn).name for respfn in local_resp]

pickrespgroups = [[('C', sensor_fn_list[0])], nom_resps_names, local_resp_names]
success, _, user_choice_groups = pick2(pickrespgroups, 'Select Response File as starting model',
                                                  prompt='Enter selection (or "q" to quit): ',
                                                  group_titles=['Response on Date of Calibration',
                                                                'Nominal Responses for model: ' + model.upper(),
                                                                'Responses Found in CWD'],
                                                  implicit_quit_q=True, multiple_choice=False,
                                                  menu_on_error=True, err_message='Invalid choice. Please try again')

if not success:
    print('quitter')
    exit(1)

nom_resp_fn = ''
if len(user_choice_groups[0]) == 1:
    nom_resp_fn = os.path.join(IDA_RESPONSES_CUR_DIR, sensor_fn_list[0])
elif len(user_choice_groups[1]) == 1:
    nom_resp_fn = os.path.join(IDA_RESPONSES_NOM_DIR, pickrespgroups[1][user_choice_groups[1][0]])
elif len(user_choice_groups[2]) == 1:
    nom_resp_fn = os.path.join(os.getcwd(), pickrespgroups[2][user_choice_groups[2][0]])

# print(os.path.normpath(nom_resp_fn))

paz = PAZ(pzfilename=nom_resp_fn, fileformat='ida', mode='vel', units='hz')
paz_fit_lf = paz.make_partial2(norm_freq=1.0, partial_mode=PAZ.PARTIAL_FITTING_LF)
paz_fit_hf = paz.make_partial2(norm_freq=1.0, partial_mode=PAZ.PARTIAL_FITTING_HF)

success, lf_map, hf_map = select_perturb_map(paz)

# print(success, lf_map, hf_map)

if not success:
    print('quitter')
    exit(1)
