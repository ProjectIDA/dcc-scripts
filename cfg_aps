#!/usr/bin/env python3

import re
from datetime import datetime
import os
from functools import reduce
from os.path import abspath, dirname, join, exists, isfile
from pathlib import Path
import yaml

# import tkinter as tk
from tkinter import Tk, Frame, LabelFrame, Menu
from tkinter import Entry, Checkbutton, Label, Button
from tkinter import IntVar, StringVar, BooleanVar
from tkinter import GROOVE, FLAT, SUNKEN, NORMAL, DISABLED
from tkinter import font, filedialog, messagebox
from tkinter.messagebox import showerror

from ida.utils import load_yaml_file

from ida.tkui.entry_widgets import FloatEntry, SeedCodeEntry, ChanListEntry, IntEntry, \
    IsoTimeEntry, BGERR, BGOK, BGGRAY


class ConfigModel():

    def __init__(self, yamlfn=''):
        # this structure should match any YAML file read in
        self.config = {
            'correlation_segment_size_secs': '',
            'segment_size_secs': '',
            'segment_size_trim_secs': '',
            'coherence_cutoff': '',
            'analysis_sample_rate_hz': '',
            'analysis_bandpass_hz': [0.1, 0.3],
            'station': '',
            'pri_sensor_installed': '',
            'pri_sensor_chans': '',
            'pri_sensor_loc': '',
            'sec_sensor_installed': '',
            'sec_sensor_chans': '',
            'sec_sensor_loc': '',
            'ref_azimuth_data': {
                'process': '',
                'ms_file': '',
                'starttime_iso': '',
                'endtime_iso': '',
            },
            'ref_absolute_data': {
                'process': '',
                'ms_file': '',
                'starttime_iso': '',
                'endtime_iso': '',
            },
            'ref_kit_metadata': {
                'network': '',
                'station': '',
                'location': '',
            }
        }

    def load_file(self, yamlfn):
        self.config, ok = load_yaml_file(yamlfn)

        return ok

    def save_file(self, savefn):
        if self.config:
            print(type(self.config), self.config)
            yamltxt = yaml.dump(self.config)
            print(type(yamltxt), yamltxt)
            with open(savefn, 'wt') as yfl:
                yfl.write(yamltxt)

    @property
    def correlation_segment_size_secs(self):
        return self.config['correlation_segment_size_secs']
    @correlation_segment_size_secs.setter
    def correlation_segment_size_secs(self, value):
        self.config['correlation_segment_size_secs'] = int(value)

    @property
    def segment_size_secs(self):
        return self.config['segment_size_secs']
    @segment_size_secs.setter
    def segment_size_secs(self, value):
        self.config['segment_size_secs'] = int(value)

    @property
    def segment_size_trim_secs(self):
        return self.config['segment_size_trim_secs']
    @segment_size_trim_secs.setter
    def segment_size_trim_secs(self, value):
        self.config['segment_size_trim_secs'] = int(value)

    @property
    def coherence_cutoff(self):
        return self.config['coherence_cutoff']
    @coherence_cutoff.setter
    def coherence_cutoff(self, value):
        self.config['coherence_cutoff'] = float(value)

    @property
    def analysis_sample_rate_hz(self):
        return self.config['analysis_sample_rate_hz']
    @analysis_sample_rate_hz.setter
    def analysis_sample_rate_hz(self, value):
        self.config['analysis_sample_rate_hz'] = int(value)

    @property
    def analysis_bandpass_hz_start(self):
        return self.config['analysis_bandpass_hz'][0]
    @analysis_bandpass_hz_start.setter
    def analysis_bandpass_hz_start(self, value):
        self.config['analysis_bandpass_hz'][0] = float(value)

    @property
    def analysis_bandpass_hz_end(self):
        return self.config['analysis_bandpass_hz'][1]
    @analysis_bandpass_hz_end.setter
    def analysis_bandpass_hz_end(self, value):
        self.config['analysis_bandpass_hz'][1] = float(value)

    @property
    def station(self):
        return self.config['station']
    @station.setter
    def station(self, value):
        self.config['station'] = value

    @property
    def pri_sensor_installed(self):
        return self.config['pri_sensor_installed']
    @pri_sensor_installed.setter
    def pri_sensor_installed(self, value):
        self.config['pri_sensor_installed'] = value

    @property
    def pri_sensor_chans(self):
        return self.config['pri_sensor_chans']
    @pri_sensor_chans.setter
    def pri_sensor_chans(self, value):
        self.config['pri_sensor_chans'] = value

    @property
    def pri_sensor_loc(self):
        return self.config['pri_sensor_loc']
    @pri_sensor_loc.setter
    def pri_sensor_loc(self, value):
        value = value.replace('_', ' ')
        self.config['pri_sensor_loc'] = value

    @property
    def sec_sensor_installed(self):
        return self.config['sec_sensor_installed']
    @sec_sensor_installed.setter
    def sec_sensor_installed(self, value):
        self.config['sec_sensor_installed'] = value

    @property
    def sec_sensor_chans(self):
        return self.config['sec_sensor_chans']
    @sec_sensor_chans.setter
    def sec_sensor_chans(self, value):
        self.config['sec_sensor_chans'] = value

    @property
    def sec_sensor_loc(self):
        return self.config['sec_sensor_loc']
    @sec_sensor_loc.setter
    def sec_sensor_loc(self, value):
        value = value.replace('_', ' ')
        self.config['sec_sensor_loc'] = value

    @property
    def azi_process(self):
        return self.config['ref_azimuth_data']['process']
    @azi_process.setter
    def azi_process(self, value):
        self.config['ref_azimuth_data']['process'] = value

    @property
    def azi_ms_file(self):
        return self.config['ref_azimuth_data']['ms_file']
    @azi_ms_file.setter
    def azi_ms_file(self, value):
        self.config['ref_azimuth_data']['ms_file'] = value

    @property
    def azi_starttime_iso(self):
        return self.config['ref_azimuth_data']['starttime_iso']
    @azi_starttime_iso.setter
    def azi_starttime_iso(self, value):
        self.config['ref_azimuth_data']['starttime_iso'] = value

    @property
    def azi_endtime_iso(self):
        return self.config['ref_azimuth_data']['endtime_iso']
    @azi_endtime_iso.setter
    def azi_endtime_iso(self, value):
        self.config['ref_azimuth_data']['endtime_iso'] = value

    @property
    def abs_process(self):
        return self.config['ref_absolute_data']['process']
    @abs_process.setter
    def abs_process(self, value):
        self.config['ref_absolute_data']['process'] = value

    @property
    def abs_ms_file(self):
        return self.config['ref_absolute_data']['ms_file']
    @abs_ms_file.setter
    def abs_ms_file(self, value):
        self.config['ref_absolute_data']['ms_file'] = value

    @property
    def abs_starttime_iso(self):
        return self.config['ref_absolute_data']['starttime_iso']
    @abs_starttime_iso.setter
    def abs_starttime_iso(self, value):
        self.config['ref_absolute_data']['starttime_iso'] = value

    @property
    def abs_endtime_iso(self):
        return self.config['ref_absolute_data']['endtime_iso']
    @abs_endtime_iso.setter
    def abs_endtime_iso(self, value):
        self.config['ref_absolute_data']['endtime_iso'] = value

    @property
    def ref_network(self):
        return self.config['ref_kit_metadata']['network']
    @ref_network.setter
    def ref_network(self, value):
        self.config['ref_kit_metadata']['network'] = value

    @property
    def ref_station(self):
        return self.config['ref_kit_metadata']['station']
    @ref_station.setter
    def ref_station(self, value):
        self.config['ref_kit_metadata']['station'] = value

    @property
    def ref_location(self):
        return self.config['ref_kit_metadata']['location']
    @ref_location.setter
    def ref_location(self, value):
        value = value.replace('_', ' ')
        self.config['ref_kit_metadata']['location'] = value


class ConfigController():

    def __init__(self):
        self.tk_vars = self.build_config()
        self.model = ConfigModel()
        # self.set_defaults()

    def load_config_from_file(self, filename):
        if self.model.load_file(filename):
            self.tk_vars['correlation_segment_size_secs'].set(str(self.model.correlation_segment_size_secs))
            self.tk_vars['segment_size_secs'].set(str(self.model.segment_size_secs))
            self.tk_vars['segment_size_trim_secs'].set(str(self.model.segment_size_trim_secs))
            self.tk_vars['coherence_cutoff'].set(str(self.model.coherence_cutoff))
            self.tk_vars['analysis_sample_rate_hz'].set(str(self.model.analysis_sample_rate_hz))
            self.tk_vars['analysis_bandpass_hz_start'].set(str(self.model.analysis_bandpass_hz_start))
            self.tk_vars['analysis_bandpass_hz_end'].set(str(self.model.analysis_bandpass_hz_end))

            self.tk_vars['station'].set(self.model.station)
            self.tk_vars['pri_sensor_installed'].set(self.model.pri_sensor_installed)
            self.tk_vars['pri_sensor_chans'].set(self.model.pri_sensor_chans)
            self.tk_vars['pri_sensor_loc'].set(self.model.pri_sensor_loc)
            self.tk_vars['sec_sensor_installed'].set(self.model.sec_sensor_installed)
            self.tk_vars['sec_sensor_chans'].set(self.model.sec_sensor_chans)
            self.tk_vars['sec_sensor_loc'].set(self.model.sec_sensor_loc)

            self.tk_vars['azi_process'].set(self.model.azi_process)
            self.tk_vars['azi_ms_file'].set(self.model.azi_ms_file)
            self.tk_vars['azi_starttime_iso'].set(self.model.azi_starttime_iso)
            self.tk_vars['azi_endtime_iso'].set(self.model.azi_endtime_iso)
            self.tk_vars['abs_process'].set(self.model.abs_process)
            self.tk_vars['abs_ms_file'].set(self.model.abs_ms_file)
            self.tk_vars['abs_starttime_iso'].set(self.model.abs_starttime_iso)
            self.tk_vars['abs_endtime_iso'].set(self.model.abs_endtime_iso)

            self.tk_vars['ref_network'].set(self.model.ref_network)
            self.tk_vars['ref_station'].set(self.model.ref_station)
            self.tk_vars['ref_location'].set(self.model.ref_location)

    def save_config_to_file(self, filename):
        if self.model:
            self.commit_changes()
            self.model.save_file(filename)

    def build_config(self):
#        segment_size_trim_secs = IntVar()
#        coherence_cutoff = DoubleVar()
        tk_vars = {
            'correlation_segment_size_secs': IntVar(),
            'segment_size_secs': StringVar(),
            'segment_size_trim_secs': StringVar(),
            'coherence_cutoff': StringVar(),
            'analysis_sample_rate_hz': StringVar(),
            'analysis_bandpass_hz_start': StringVar(),
            'analysis_bandpass_hz_end': StringVar(),
            'station': StringVar(),
            'pri_sensor_installed': BooleanVar(),
            'pri_sensor_chans': StringVar(),
            'pri_sensor_loc': StringVar(),
            'sec_sensor_installed': BooleanVar(),
            'sec_sensor_chans': StringVar(),
            'sec_sensor_loc': StringVar(),
            'azi_process': BooleanVar(),
            'azi_ms_file': StringVar(),
            'azi_starttime_iso': StringVar(),
            'azi_endtime_iso': StringVar(),
            'abs_process': BooleanVar(),
            'abs_ms_file': StringVar(),
            'abs_starttime_iso': StringVar(),
            'abs_endtime_iso': StringVar(),
            'ref_network': StringVar(),
            'ref_station': StringVar(),
            'ref_location': StringVar(),
        }

        return tk_vars

    def commit_changes(self):
        for key, var in self.tk_vars.items():
            estr = 'self.model.' + key + ' = var.get()'
            exec(estr)
        # else

    def set_defaults(self):
        self.tk_vars['correlation_segment_size_secs'].set('7200')
        self.tk_vars['segment_size_secs'].set('1024')
        self.tk_vars['segment_size_trim_secs'].set('128')
        self.tk_vars['coherence_cutoff'].set('0.99')
        self.tk_vars['analysis_sample_rate_hz'].set('5')
        self.tk_vars['analysis_bandpass_hz_start'].set('0.1')
        self.tk_vars['analysis_bandpass_hz_end'].set('0.3')
        self.tk_vars['station'].set('')
        self.tk_vars['pri_sensor_installed'].set(True)
        self.tk_vars['pri_sensor_chans'].set('BHZ,BH1,BH2')
        self.tk_vars['pri_sensor_loc'].set('00')
        self.tk_vars['sec_sensor_installed'].set(True)
        self.tk_vars['sec_sensor_chans'].set('BHZ,BH1,BH2')
        self.tk_vars['sec_sensor_loc'].set('10')

        self.tk_vars['azi_process'].set(True)
        self.tk_vars['azi_ms_file'].set('')
        self.tk_vars['azi_starttime_iso'].set('')
        self.tk_vars['azi_endtime_iso'].set('')
        self.tk_vars['abs_process'].set(True)
        self.tk_vars['abs_ms_file'].set('')
        self.tk_vars['abs_starttime_iso'].set('')
        self.tk_vars['abs_endtime_iso'].set('')

        self.tk_vars['ref_network'].set('')
        self.tk_vars['ref_station'].set('')
        self.tk_vars['ref_location'].set('')

    def is_valid(self, varkey):

        if varkey == 'station':
            self.tk_vars['station'].get()
            return re.fullmatch(r'[a-zA-Z0-9]{3,5}', self.tk_vars['station'].get())

        elif varkey in ['pri_sensor_installed', 'sec_sensor_installed',
                     'azi_process', 'abs_process']:
            return True  # these can't be 'bad'

        elif varkey == 'pri_sensor_chans':
            return (not self.tk_vars['pri_sensor_installed'].get()) or \
                   re.fullmatch(r'(.hz( *, *| +).h1( *, *| +).h2)|(.hz( *, *| +).hn( *, *| +).he)',
                                self.tk_vars['pri_sensor_chans'].get(), flags=re.IGNORECASE)

        elif varkey == 'pri_sensor_loc':
            return (not self.tk_vars['pri_sensor_installed'].get()) or \
                   re.fullmatch(r'([0-9a-zA-Z_]{2})|(__)',
                                self.tk_vars['pri_sensor_loc'].get(), flags=re.IGNORECASE)

        elif varkey == 'sec_sensor_chans':
            return (not self.tk_vars['sec_sensor_installed'].get()) or \
                   re.fullmatch(r'(.hz( *, *| +).h1( *, *| +).h2)|(.hz( *, *| +).hn( *, *| +).he)',
                                self.tk_vars['sec_sensor_chans'].get(), flags=re.IGNORECASE)

        elif varkey == 'sec_sensor_loc':
            return (not self.tk_vars['sec_sensor_installed'].get()) or \
                   re.fullmatch(r'([0-9a-zA-Z_]{2})|(__)',
                                self.tk_vars['sec_sensor_loc'].get(), flags=re.IGNORECASE)

        elif varkey == 'azi_ms_file':
            ms_file = self.tk_vars['azi_ms_file'].get()
            return (not self.tk_vars['azi_process'].get()) or (
                ms_file and exists(ms_file) and isfile(ms_file)
            )

        elif varkey == 'azi_starttime_iso':
            time_iso = self.tk_vars['azi_starttime_iso'].get()
            if self.tk_vars['azi_process'].get():
                isok = True
                try:
                    datetime.strptime(time_iso, '%Y-%m-%d %H:%M:%S')
                except:
                    try:
                        datetime.strptime(time_iso, '%Y-%m-%dT%H:%M:%S')
                    except:
                        isok = False
                return isok
            else:
                return True
        elif varkey == 'azi_endtime_iso':
            time_iso = self.tk_vars['azi_endtime_iso'].get()
            if self.tk_vars['azi_process'].get():
                isok = True
                try:
                    datetime.strptime(time_iso, '%Y-%m-%d %H:%M:%S')
                except:
                    try:
                        datetime.strptime(time_iso, '%Y-%m-%dT%H:%M:%S')
                    except:
                        isok = False
                return isok
            else:
                return True

        elif varkey == 'abs_ms_file':
            ms_file = self.tk_vars['abs_ms_file'].get()
            return (not self.tk_vars['abs_process'].get()) or (
                ms_file and exists(ms_file) and isfile(ms_file)
            )

        elif varkey == 'abs_starttime_iso':
            time_iso = self.tk_vars['abs_starttime_iso'].get()
            if self.tk_vars['abs_process'].get():
                isok = True
                try:
                    datetime.strptime(time_iso, '%Y-%m-%d %H:%M:%S')
                except:
                    try:
                        datetime.strptime(time_iso, '%Y-%m-%dT%H:%M:%S')
                    except:
                        isok = False
                return isok
            else:
                return True
        elif varkey == 'abs_endtime_iso':
            time_iso = self.tk_vars['abs_endtime_iso'].get()
            if self.tk_vars['abs_process'].get():
                isok = True
                try:
                    datetime.strptime(time_iso, '%Y-%m-%d %H:%M:%S')
                except:
                    try:
                        datetime.strptime(time_iso, '%Y-%m-%dT%H:%M:%S')
                    except:
                        isok = False
                return isok
            else:
                return True

        elif varkey == 'correlation_segment_size_secs':
            val = self.tk_vars['correlation_segment_size_secs'].get()
            return val and ((int(val) >= 3600) and (int(val) <= 14000))

        elif varkey == 'segment_size_secs':
            val = self.tk_vars['segment_size_secs'].get()
            return val and ((int(val) >= 1024) and (int(val) <= 4096))

        elif varkey == 'segment_size_trim_secs':
            val = self.tk_vars['segment_size_trim_secs'].get()
            return val and ((int(val) >= 128) and (int(val) <= 512))

        elif varkey == 'coherence_cutoff':
            val = self.tk_vars['coherence_cutoff'].get()
            return val and ((float(val) > 0.0) and (float(val) < 1.0))

        elif varkey == 'analysis_sample_rate_hz':
            val = self.tk_vars['analysis_sample_rate_hz'].get()
            return val and ((int(val) % 5 == 0) and (int(val) <= 20))

        elif varkey == 'analysis_bandpass_hz_start':
            val = self.tk_vars['analysis_bandpass_hz_start'].get()
            return val and ((float(val) >= 0.1) and (float(val) < 1.0))

        elif varkey == 'analysis_bandpass_hz_end':
            val = self.tk_vars['analysis_bandpass_hz_end'].get()
            return val and ((float(val) >= 0.1) and (float(val) < 1.0))


    def is_config_valid(self):

        errmsgs = []
        station = self.tk_vars['station'].get()
        if not re.fullmatch(r'[a-zA-Z0-9]{3,5}', station):
            errmsgs.append('Missing or Invalid STATION CODE: {}.'.format(station))

        pri_sensor_installed = self.tk_vars['pri_sensor_installed'].get()
        if pri_sensor_installed:
            pri_sensor_chans = self.tk_vars['pri_sensor_chans'].get()
            pri_sensor_loc = self.tk_vars['pri_sensor_loc'].get()
            if not re.fullmatch(r'(.hz( *, *| +).h1( *, *| +).h2)|(.hz( *, *| +).hn( *, *| +).he)',
                                pri_sensor_chans, flags=re.IGNORECASE):
                errmsgs.append('Missing or Invalid PRIMARY SENSOR CHANNELS: [{}].  '.format(pri_sensor_chans) + \
                'Enter 3-character channel codes, comma or space separated, ' \
                'one for each component in Z12/ZNE order. E.g.: bhz,bh1,bh2')
                #chans_val_re = '(.hz( *, *| +).h1( *, *| +).h2)|(.hz( *, *| +).hn( *, *| +).he)'
            if not re.fullmatch(r'([0-9a-zA-Z_]{2})|(__)', pri_sensor_loc):
                errmsgs.append('Missing or Invalid PRIMARY LOCATION CODE: [{}].  ' \
                'Enter 2-character LOCATION code. Enter 2 spaces or underscores ' \
                'for an empty LOCATION code.'.format(pri_sensor_loc))

        sec_sensor_installed = self.tk_vars['sec_sensor_installed'].get()
        if sec_sensor_installed:
            sec_sensor_chans = self.tk_vars['sec_sensor_chans'].get()
            sec_sensor_loc = self.tk_vars['sec_sensor_loc'].get()
            if not re.fullmatch(r'(.hz( *, *| +).h1( *, *| +).h2)|(.hz( *, *| +).hn( *, *| +).he)',
                                sec_sensor_chans, flags=re.IGNORECASE):
                errmsgs.append('Missing or Invalid SECONDARY SENSOR CHANNELS: [{}].  ' \
                'Enter 3-character channel codes, comma or space separated, ' \
                'one for each component in Z12/ZNE order. E.g.: bhz,bh1,bh2'.format(sec_sensor_chans))
            if not re.fullmatch(r'([0-9a-zA-Z_]{2})|(__)', sec_sensor_loc):
                errmsgs.append('Missing or Invalid SECONDARY LOCATION CODE: [{}].  ' \
                'Enter 2-character LOCATION code. Enter 2 spaces or underscores ' \
                'for an empty LOCATION code.'.format(sec_sensor_loc))

        azi_process = self.tk_vars['azi_process'].get()
        if azi_process:
            startdt = None
            enddt = None
            azi_ms_file = self.tk_vars['azi_ms_file'].get()
            azi_starttime_iso = self.tk_vars['azi_starttime_iso'].get()
            azi_endtime_iso = self.tk_vars['azi_endtime_iso'].get()
            if not azi_starttime_iso:
                errmsgs.append('Missing the AZIMUTH START TIME file path.')
            else:
                if not azi_ms_file:
                    errmsgs.append('Missing the AZIMUTH MS file path.')
                try:
                    startdt = datetime.strptime(azi_starttime_iso, '%Y-%m-%d %H:%M:%S')
                except:
                    try:
                        startdt = datetime.strptime(azi_starttime_iso, '%Y-%m-%dT%H:%M:%S')
                    except:
                        startdt = None
                        errmsgs.append('Invalid AZIMUTH START TIME Specified [{}]. ' \
                                       'Must be formatted as YYYY-MM-DD HH:MM:SS'.format(azi_starttime_iso))

            if not azi_endtime_iso:
                errmsgs.append('Missing the AZIMUTH END TIME file path.')
            else:
                try:
                    enddt = datetime.strptime(azi_endtime_iso, '%Y-%m-%d %H:%M:%S')
                except:
                    try:
                        enddt = datetime.strptime(azi_endtime_iso, '%Y-%m-%dT%H:%M:%S')
                    except:
                        enddt = None
                        errmsgs.append('Invalid AZIMUTH END TIME Specified [{}]. ' \
                                       'Must be formatted as YYYY-MM-DD HH:MM:SS'.format(azi_endtime_iso))

            if startdt and enddt and (enddt <= startdt):
                errmsgs.append('Invalid AZIMUTH Times. END TIME [{}] ' \
                               'must be after START TIME [{}]'.format(enddt, startdt))

        abs_process = self.tk_vars['abs_process'].get()
        if abs_process:
            startdt = None
            enddt = None
            abs_ms_file = self.tk_vars['abs_ms_file'].get()
            abs_starttime_iso = self.tk_vars['abs_starttime_iso'].get()
            abs_endtime_iso = self.tk_vars['abs_endtime_iso'].get()
            if not abs_ms_file:
                errmsgs.append('Missing the ABSOLUTE MS file path.')
            if not abs_starttime_iso:
                errmsgs.append('Missing the ABSOLUTE START TIME file path.')
            else:
                try:
                    startdt = datetime.strptime(abs_starttime_iso, '%Y-%m-%d %H:%M:%S')
                except:
                    try:
                        startdt = datetime.strptime(abs_starttime_iso, '%Y-%m-%dT%H:%M:%S')
                    except:
                        startdt = None
                        errmsgs.append('Invalid ABSOLUTE START TIME Specified [{}]. ' \
                                       'Must be formatted as YYYY-MM-DD HH:MM:SS'.format(abs_starttime_iso))

            if not abs_endtime_iso:
                errmsgs.append('Missing the ABSOLUTE END TIME file path.')
            else:
                try:
                    enddt = datetime.strptime(abs_endtime_iso, '%Y-%m-%d %H:%M:%S')
                except:
                    try:
                        enddt = datetime.strptime(abs_endtime_iso, '%Y-%m-%dT%H:%M:%S')
                    except:
                        enddt = None
                        errmsgs.append('Invalid ABSOLUTE END TIME Specified [{}]. ' \
                                       'Must be formatted as YYYY-MM-DD HH:MM:SS'.format(abs_endtime_iso))

            if startdt and enddt and (enddt <= startdt):
                errmsgs.append('Invalid ABSOLUTE Times. END TIME [{}] ' \
                               'must be after START TIME [{}]'.format(enddt, startdt))

        val = self.tk_vars['correlation_segment_size_secs'].get()
        if not val:
            errmsgs.append('Missing CORRELATION SEGMENT SIZE. ' + \
                           'Please specify in seconds, between 3600 and 14400.')
        elif (int(val) < 3600) or \
                (int(val) > 14000):
            errmsgs.append('Invalid CORRELATION SEGMENT SIZE [{}]. ' \
                           'Please specify a value between 3600 and 14400.'.format(val))

        val = self.tk_vars['segment_size_secs'].get()
        if not val:
            errmsgs.append('Missing ANALYSIS SEGMENT SIZE. Please specify in seconds, between 1024 and 4096.')
        elif (int(val) < 1024) or (int(val) > 4096):
            errmsgs.append('Invalid ANALYSIS SEGMENT SIZE [{}]. ' \
                           'Please specify a value between 1024 and 4096.'.format(val))

        val = self.tk_vars['segment_size_trim_secs'].get()
        if not val:
            errmsgs.append('Missing SEGMENT TRIM SIZE. Please specify in seconds. ' + \
                           'This should be approx 1/8 of the ANALYSIS SEGMENT SIZE')
        elif (int(val) < 128) or (int(val) > 512):
            errmsgs.append('Invalid SEGMENT TRIM SIZE [{}]. ' \
                           'Please specify a value between 128 and 512.'.format(val))

        val = self.tk_vars['coherence_cutoff'].get()
        if not val:
            errmsgs.append('Missing COHERENCE CUTOFF. Enter a value greater than 0.0 and less than 1.0.')
        elif (float(val) < 0.0) or (float(val) >= 1.0):
            errmsgs.append('Invalid COHERENCE CUTOFF [{}]. ' \
            'Please specify a value greater than 0.0 and less than 1.0'.format(val))

        val = self.tk_vars['analysis_sample_rate_hz'].get()
        if not val:
            errmsgs.append('Missing ANALYSIS SAMPLE RATE. Enter a multiple of 5 that is <= 20. ' + \
                           '5 has been thoroughly tested.')
        elif (int(val) % 5 != 0) or (int(val) > 20):
            errmsgs.append('Invalid ANALYSIS SAMPLE RATE [{}]. ' \
                           'Enter a multiple of 5 that is <= 20'.format(val))

        analysis_bandpass_hz_start = self.tk_vars['analysis_bandpass_hz_start'].get()
        bpstart = None
        if not analysis_bandpass_hz_start:
            errmsgs.append('Missing ANALYSIS BANDPASS START. Enter the starting frequency (hz) ' + \
                           'of the bandpass used for analysis. 0.1 is good. ')
        elif (float(analysis_bandpass_hz_start) < 0.1) or (float(analysis_bandpass_hz_start) > 1.0):
            errmsgs.append('Invalid ANALYSIS BANDPASS START [{}]. Frequencies < 0.1 and >1.0 ' \
                           'have not been tested.'.format(analysis_bandpass_hz_start))
        else:
            bpstart = float(analysis_bandpass_hz_start)

        analysis_bandpass_hz_end = self.tk_vars['analysis_bandpass_hz_end'].get()
        bpend = None
        if not analysis_bandpass_hz_end:
            errmsgs.append('Missing ANALYSIS BANDPASS END. Enter the ending frequency (hz) ' + \
                           'of the bandpass used for analysis. 0.3 is good. ')
        elif (float(analysis_bandpass_hz_end) < 0.1) or (float(analysis_bandpass_hz_end) > 1.0):
            errmsgs.append('Invalid ANALYSIS BANDPASS END [{}]. Frequencies < 0.1 and >1.0 ' \
                           'have not been tested.'.format(analysis_bandpass_hz_end))
        else:
            bpend = float(analysis_bandpass_hz_end)
        if bpstart and bpend and (bpend <= bpstart):
            errmsgs.append('Invalid ANAYLSIS BANDPASS. ' + \
            'END frequency [{}] must be greater than the START frequency [{}]'.format(bpend, bpstart))

        # ref_network = self.tk_vars['ref_network'].get()
        # ref_station = self.tk_vars['ref_station'].get()
        # ref_location = self.tk_vars['ref_location'].get()

        return len(errmsgs) == 0, errmsgs


class Configurator():
    """ A Gui application with three buttons"""
    def __init__(self):
        """ Inititalization the frame"""

        self.appname = 'APSurvey Analysis Configuration Editor'
        self.filename = '<untitled.yaml>'
        self.directory = '.'

        self.root = Tk()
        self.root.config(width=800, height=710, padx=5, pady=5, bg=BGGRAY)
        self.root.rowconfigure(0, weight=1, minsize=360)
        self.root.columnconfigure(0, weight=1)
        self.root.resizable(width=False, height=False)
        self.root.title('APSurvey Analysis Configuration Editor: '+ self.filename)

        self.tk_wids= {
            'correlation_segment_size_secs': None,
            'segment_size_secs': None,
            'segment_size_trim_secs': None,
            'coherence_cutoff': None,
            'analysis_sample_rate_hz': None,
            'analysis_bandpass_hz_start': None,
            'analysis_bandpass_hz_end': None,

            'station': None,
            'pri_sensor_installed': None,
            'pri_sensor_chans': None,
            'pri_sensor_loc': None,
            'sec_sensor_installed': None,
            'sec_sensor_chans': None,
            'sec_sensor_loc': None,

            'azi_process': None,
            'azi_ms_file': None,
            'azi_starttime_iso': None,
            'azi_endtime_iso': None,
            'abs_process': None,
            'abs_ms_file': None,
            'abs_starttime_iso': None,
            'abs_endtime_iso': None,

            'ref_network': None,
            'ref_station': None,
            'ref_location': None,
        }

        self.ctrl = ConfigController()

        self.setup_main_frm()

        # need to do this after setting up main form so tray lbl widget exists
        self.set_new_file(abspath('untitled.yaml'))
        self.set_modified(False)

        self.ctrl.set_defaults()

        self.root.protocol('WM_DELETE_WINDOW', self.exit)
        self.root.mainloop()

    def set_modified(self, modified):
        self.cfg_modified = modified
        if modified:
           self.cur_file_lbl.config(fg='#B00')
        else:
           self.cur_file_lbl.config(fg='#0B0')

    def set_new_file(self, fname):
        self.set_modified(False)
        self.filename = Path(fname).name
        self.directory = dirname(fname)
        self.cur_file_lbl.config(text="File: " + fname)
        self.root.title(self.appname + ': ' + self.filename)

    def on_select_datafile_button(self, datatype, tkvar):

        idaroot = os.environ.get('IDA_CAL_RAW_DIR')
        if idaroot and exists(idaroot):
            rootdir = idaroot
        else:
            rootdir = '.'

        datatype = datatype.upper()
        if datatype== 'AZI':
            title = 'Select Reference AZIMUTH Survey Miniseed file'
        elif datatype == 'ABS':
            title = 'Select Reference ABSOLUTE Survey Miniseed file'
        # elif datatype == 'asdasd'

        fname = filedialog.askopenfilename(initialdir=rootdir,
            filetypes=[('Miniseed Files', '*.ms'), ('Miniseed Files', '*.seed')],
            title=title)

        if fname:
            tkvar.set(fname)
            self.set_modified(True)
            self.refresh_ui()

    def open_config_file(self):
        fname = filedialog.askopenfilename(initialdir='.',
            filetypes=[('YAML Config File', '*.yaml')],
            title='Open APSurvey Analysis Configuration File')

        if fname:
            self.ctrl.load_config_from_file(fname)
            self.set_new_file(fname)
            self.refresh_ui()

    def save_config_as(self):

        config_ok, errs = self.ctrl.is_config_valid()
        if not config_ok:
            for err in errs:
                print(err)
                showerror('Configuration Errors',
                          'You must fix the following errors before saving this configuration. \n\n' + \
                          reduce(lambda x, y: x + '\n\n- ' + y, errs[1:], '- ' + errs[0])
                          )
        else:
            fname = filedialog.asksaveasfilename(initialdir=self.directory, initialfile=self.filename,
                filetypes=[('YAML Config File', '*.yaml')],
                title='Save APSurvey Analysis Configuration')

            if fname:
                print('saving to:', fname)
                self.ctrl.save_config_to_file(fname)
                self.set_new_file(fname)

    def save_config(self):

        config_ok, errs = self.ctrl.is_config_valid()
        if not config_ok:
            #for err in errs:
            #    print(err)
            showerror('Configuration Errors',
                      'You must fix the following errors before saving this configuration. \n\n' + \
                      reduce(lambda x,y: x + '\n\n- ' + y, errs[1:], '- '+errs[0])
                     )
        else:
           if self.filename == 'untitled.yaml':
               fname = filedialog.asksaveasfilename(initialdir=self.directory, initialfile=self.filename,
                                                    filetypes=[('YAML Config File', '*.yaml')],
                                                    title='Save RB Analysis Configuration')
           else:
               fname = join(self.directory, self.filename)
           if fname:
              self.ctrl.save_config_to_file(fname)
              self.set_new_file(fname)

    def show_about_dlg(self):
        pass

    def setup_main_frm(self):

        WIDTH = 860
        HEADFONT = font.Font(font='Helvetica 15 bold')
        LBLBOLD = font.Font(font='Helvetica 11 bold')
        FIXEDBOLDFONT = font.Font(family='Courier', size=10, weight='bold')

        self.menu_bar = Menu(self.root)
        file_menu = Menu(self.menu_bar)
        file_menu.add_command(label='Open...', underline=0, command=self.open_config_file)
        file_menu.add_command(label='Save', underline=0, command=self.save_config)
        file_menu.add_command(label='Save As...', command=self.save_config)
        file_menu.add_separator()
        file_menu.add_command(label='Exit', command=self.exit)
        self.menu_bar.add_cascade(label="File", menu=file_menu)
        self.menu_bar.add_command(label="About", command=self.show_about_dlg)
        self.root.config(menu=self.menu_bar)

        self.main_frm = Frame(self.root, width=WIDTH, height=710, bg=BGGRAY)
        self.main_frm.grid(row=0, column=0, sticky='nw')
        self.main_frm.grid_propagate(0)
        self.main_frm.columnconfigure(0, weight=1, uniform=1)
        self.main_frm.columnconfigure(1, weight=1, uniform=1)
        self.main_frm.rowconfigure(0, weight=0, pad=5) ##, minsize=30)
        self.main_frm.rowconfigure(1, weight=0, pad=5, minsize=120)
        self.main_frm.rowconfigure(2, weight=0, pad=5, minsize=120)
        self.main_frm.rowconfigure(3, weight=0, pad=5)
        self.main_frm.rowconfigure(4, weight=0, pad=5)
        self.main_frm.rowconfigure(5, weight=0, pad=5)

        title_frm = LabelFrame(self.main_frm, text='', bd=2, width=WIDTH, height=40,
            bg=BGGRAY, relief=FLAT, font=HEADFONT)
        title_frm.grid(row=0, column=0, columnspan=2, sticky='nw')
        title_frm.grid_propagate(0)
        title_frm.columnconfigure(0, weight=1, uniform=1)
        title_frm.rowconfigure(0, weight=1)
        lbl = Label(title_frm, text=self.appname, font=HEADFONT, bg=BGGRAY)
        lbl.grid(row=0, column=0, sticky='n')

        sensors_frm = LabelFrame(self.main_frm, text=' Sensors at Station ',
            width=WIDTH, height=150, bg=BGGRAY, bd=2, relief=GROOVE, font=HEADFONT)
        sensors_frm.grid_propagate(0)
        sensors_frm.grid(row=1, column=0, columnspan=2, sticky='nw')
        sensors_frm.columnconfigure(0, minsize=250, uniform='1')
        sensors_frm.columnconfigure(1, weight=1, uniform='2')
        sensors_frm.columnconfigure(2, minsize=250, uniform='1')
        sensors_frm.columnconfigure(3, weight=1, uniform='2')
        sensors_frm.rowconfigure(0, weight=1, uniform='1')
        sensors_frm.rowconfigure(1, weight=1, uniform='1')
        sensors_frm.rowconfigure(2, weight=1, uniform='1')
        sensors_frm.rowconfigure(3, weight=1, uniform='1')

        azi_frm = LabelFrame(self.main_frm, text=' Azimuth Data ', bg=BGGRAY, width=WIDTH, height=120,
                             bd=2, relief=GROOVE, font=HEADFONT)
        abs_frm = LabelFrame(self.main_frm, text=' Absolute Data ', bg=BGGRAY, width=WIDTH, height=120,
                             bd=2, relief=GROOVE, font=HEADFONT)
        azi_frm.grid_propagate(0)
        abs_frm.grid_propagate(0)
        azi_frm.grid(row=2, column=0, columnspan=2, sticky='nw')
        abs_frm.grid(row=3, column=0, columnspan=2, sticky='nw')

        azi_frm.columnconfigure(0, weight=2, uniform='1')
        azi_frm.columnconfigure(1, weight=3, uniform='2')
        azi_frm.columnconfigure(2, weight=2, uniform='1')
        azi_frm.columnconfigure(3, weight=3, uniform='2')
        azi_frm.columnconfigure(4, weight=1, uniform='3')

        abs_frm.columnconfigure(0, weight=2, uniform='1')
        abs_frm.columnconfigure(1, weight=3, uniform='2')
        abs_frm.columnconfigure(2, weight=2, uniform='1')
        abs_frm.columnconfigure(3, weight=3, uniform='2')
        abs_frm.columnconfigure(4, weight=1, uniform='3')

        analysis_frm = LabelFrame(self.main_frm, text=' Analysis Parameters ', width=WIDTH, height=160,
                                  bg=BGGRAY, bd=2, font=HEADFONT, relief=GROOVE)
        analysis_frm.grid_propagate(0)
        analysis_frm.grid(row=4, column=0, columnspan=2, sticky='nw')
        analysis_frm.columnconfigure(0, minsize=250, uniform='1')
        analysis_frm.columnconfigure(1, weight=4, uniform='2')
        analysis_frm.columnconfigure(2, minsize=250, uniform='1')
        analysis_frm.columnconfigure(3, weight=4, uniform='2')
        analysis_frm.rowconfigure(0, weight=1)
        analysis_frm.rowconfigure(1, weight=1)
        analysis_frm.rowconfigure(2, weight=1)
        analysis_frm.rowconfigure(3, weight=1)

        ref_frm = LabelFrame(self.main_frm, text=' Reference Sensor Metadata Overrides ', bg=BGGRAY,
                             width=WIDTH, height=60, bd=2, relief=GROOVE, font=HEADFONT)
        ref_frm.grid_propagate(0)
        ref_frm.grid(row=5, column=0, columnspan=2, sticky='nw')
        ref_frm.columnconfigure(0, weight=1)
        ref_frm.columnconfigure(1, weight=1)
        ref_frm.columnconfigure(2, weight=1)
        ref_frm.columnconfigure(3, weight=1)
        ref_frm.columnconfigure(4, weight=1)
        ref_frm.columnconfigure(5, weight=1)

        tray_frm = LabelFrame(self.main_frm, text='', padx=5, pady=5,
                              width=WIDTH, height=28, bg='#EEE', bd=2,
                              font=HEADFONT, relief=SUNKEN)
        tray_frm.grid_propagate(0)
        tray_frm.grid(row=6, column=0, columnspan=2, sticky='w')
        tray_frm.columnconfigure(0, weight=1)

        # add 3x2 grid of controls

        # set up station sensors grid
        # pri sensor info
        Label(sensors_frm, text='Station Code:', bg=BGGRAY, font=LBLBOLD).place(x=5, y=7)
        self.tk_wids['station'] = SeedCodeEntry(sensors_frm, font=FIXEDBOLDFONT, width=5,
            textvariable=self.ctrl.tk_vars['station'],
            charset_cre=re.compile('[a-zA-Z0-9]*'))
        self.tk_wids['station'].place(x=105, y=5)

        self.tk_wids['pri_sensor_installed'] = Checkbutton(sensors_frm, text='Analyze Primary Sensor', bg=BGGRAY,
            command=self.pri_sensor_installed_clicked, variable=self.ctrl.tk_vars['pri_sensor_installed'],
            font=LBLBOLD)
        self.tk_wids['pri_sensor_installed'].grid(row=1, column=0, sticky='e')

        Label(sensors_frm, text='Pri Sensor Cha Codes (Z,1,2):',
              bg=BGGRAY, font=LBLBOLD).grid(row=2, column=0, sticky='e')
        self.tk_wids['pri_sensor_chans'] = ChanListEntry(sensors_frm, font=FIXEDBOLDFONT, width=12,
            textvariable=self.ctrl.tk_vars['pri_sensor_chans'])
        self.tk_wids['pri_sensor_chans'].grid(row=2, column=1, sticky='w')

        Label(sensors_frm, text='Pri Sensor Loc Code:',
              bg=BGGRAY, font=LBLBOLD).grid(row=3, column=0, sticky='e')
        self.tk_wids['pri_sensor_loc'] = SeedCodeEntry(sensors_frm, font=FIXEDBOLDFONT, width=4,
            textvariable=self.ctrl.tk_vars['pri_sensor_loc'],
            charset_cre=re.compile('[a-zA-Z0-9_]*'))
        self.tk_wids['pri_sensor_loc'].grid(row=3, column=1, sticky='w')

        # sec sensor info
        self.tk_wids['sec_sensor_installed'] = Checkbutton(sensors_frm, text='Analyze Secondary Sensor', bg=BGGRAY,
            command=self.sec_sensor_installed_clicked, variable=self.ctrl.tk_vars['sec_sensor_installed'],
            font=LBLBOLD)
        self.tk_wids['sec_sensor_installed'].grid(row=1, column=2, sticky='e')

        Label(sensors_frm, text='Sec Sensor Channel Codes (Z,1,2):',
              font=LBLBOLD, bg=BGGRAY).grid(row=2, column=2, sticky='e')
        self.tk_wids['sec_sensor_chans'] = ChanListEntry(sensors_frm, font=FIXEDBOLDFONT, width=12,
            textvariable=self.ctrl.tk_vars['sec_sensor_chans'])
        self.tk_wids['sec_sensor_chans'].grid(row=2, column=3, sticky='w')

        Label(sensors_frm, text='Sec Sensor Loc Code:',
              font=LBLBOLD, bg=BGGRAY).grid(row=3, column=2, sticky='e')
        self.tk_wids['sec_sensor_loc'] = SeedCodeEntry(sensors_frm, font=FIXEDBOLDFONT, width=4,
            textvariable=self.ctrl.tk_vars['sec_sensor_loc'],
            charset_cre=re.compile('[a-zA-Z0-9_]*'))
        self.tk_wids['sec_sensor_loc'].grid(row=3, column=3, sticky='w')


        # set up analysis grid
        Label(analysis_frm, text='Correlation Segment Size (secs):',
              bg=BGGRAY, font=LBLBOLD).grid(row=0, column=0, sticky='e')
        self.tk_wids['correlation_segment_size_secs'] = IntEntry(analysis_frm, font=FIXEDBOLDFONT, width=5,
            textvariable=self.ctrl.tk_vars['correlation_segment_size_secs'])
        self.tk_wids['correlation_segment_size_secs'].grid(row=0, column=1, sticky='w')

        Label(analysis_frm, text='Analysis Segment Size (secs):',
              bg=BGGRAY, font=LBLBOLD).grid(row=1, column=0, sticky='e')
        self.tk_wids['segment_size_secs'] = IntEntry(analysis_frm, font=FIXEDBOLDFONT, width=5,
            textvariable=self.ctrl.tk_vars['segment_size_secs'])
        self.tk_wids['segment_size_secs'].grid(row=1, column=1, sticky='w')

        Label(analysis_frm, text='Segment Trim Size (secs):',
              bg=BGGRAY, font=LBLBOLD).grid(row=2, column=0, sticky='e')
        self.tk_wids['segment_size_trim_secs'] = IntEntry(analysis_frm, font=FIXEDBOLDFONT, width=5,
            textvariable=self.ctrl.tk_vars['segment_size_trim_secs'])
        self.tk_wids['segment_size_trim_secs'].grid(row=2, column=1, sticky='w')

        Label(analysis_frm, text='Coherence Cutoff (0.0 - 1.0):',
              bg=BGGRAY, font=LBLBOLD).grid(row=3, column=0, sticky='e')
        self.tk_wids['coherence_cutoff'] = FloatEntry(analysis_frm, font=FIXEDBOLDFONT, width=5,
                                                      textvariable=self.ctrl.tk_vars['coherence_cutoff'])
        self.tk_wids['coherence_cutoff'].grid(row=3, column=1, sticky='w')

        Label(analysis_frm, text='Analysis Sample Rate (hz):',
              bg=BGGRAY, font=LBLBOLD).grid(row=0, column=2, sticky='e')
        self.tk_wids['analysis_sample_rate_hz'] = IntEntry(analysis_frm, font=FIXEDBOLDFONT, width=5, value=5,
                                                           textvariable=self.ctrl.tk_vars['analysis_sample_rate_hz'])
        self.tk_wids['analysis_sample_rate_hz'].grid(row=0, column=3, sticky='w')

        Label(analysis_frm, text='Analysis Bandpass Start (hz):',
              bg=BGGRAY, font=LBLBOLD).grid(row=1, column=2, sticky='e')
        self.tk_wids['analysis_bandpass_hz_start'] = FloatEntry(analysis_frm, font=FIXEDBOLDFONT, width=5,
                                                                textvariable=self.ctrl.tk_vars['analysis_bandpass_hz_start'])
        self.tk_wids['analysis_bandpass_hz_start'].grid(row=1, column=3, sticky='w')

        Label(analysis_frm, text='Analysis Bandpass End (hz):',
              bg=BGGRAY, font=LBLBOLD).grid(row=2, column=2, sticky='e')
        self.tk_wids['analysis_bandpass_hz_end'] = FloatEntry(analysis_frm, font=FIXEDBOLDFONT, width=5,
                                                              textvariable=self.ctrl.tk_vars['analysis_bandpass_hz_end'])
        self.tk_wids['analysis_bandpass_hz_end'].grid(row=2, column=3, sticky='w')

        # AZIMUTH Settings
        self.tk_wids['azi_process'] = Checkbutton(azi_frm, text='Process AZIMUTH Data', bg=BGGRAY,
            command=self.azi_process_clicked, variable=self.ctrl.tk_vars['azi_process'])
        self.tk_wids['azi_process'].grid(row=0, column=1, columnspan=2, sticky='w')

        Label(azi_frm, text='Azimuth MS File:', bg=BGGRAY, font=LBLBOLD).grid(row=1, column=0, sticky='e')
        self.tk_wids['azi_ms_file'] = Entry(azi_frm, font=FIXEDBOLDFONT, width=72,
            textvariable=self.ctrl.tk_vars['azi_ms_file'])
        self.tk_wids['azi_ms_file'].grid(row=1, column=1, columnspan=3, sticky='w')
        self.tk_wids['azi_ms_file_button'] = Button(azi_frm, text='Select...', highlightbackground=BGGRAY,
            command=(lambda: self.on_select_datafile_button('azi', self.ctrl.tk_vars['azi_ms_file'])))
        self.tk_wids['azi_ms_file_button'].grid(row=1, column=4, sticky='w')

        Label(azi_frm, text='Start Time (UTC):', bg=BGGRAY, font=LBLBOLD).grid(row=2, column=0, sticky='e')
        self.tk_wids['azi_starttime_iso'] = IsoTimeEntry(azi_frm, font=FIXEDBOLDFONT, width=19,
            textvariable=self.ctrl.tk_vars['azi_starttime_iso'])
        self.tk_wids['azi_starttime_iso'].grid(row=2, column=1, sticky='w')

        Label(azi_frm, text='End Time (UTC):', bg=BGGRAY, font=LBLBOLD).grid(row=2, column=2, sticky='e')
        self.tk_wids['azi_endtime_iso'] = IsoTimeEntry(azi_frm, font=FIXEDBOLDFONT, width=19,
            textvariable=self.ctrl.tk_vars['azi_endtime_iso'])
        self.tk_wids['azi_endtime_iso'].grid(row=2, column=3, sticky='w')

        # ABSOLUTE Settings
        self.tk_wids['abs_process'] = Checkbutton(abs_frm, text='Process ABSOLUTE Data', bg=BGGRAY,
                        command=self.abs_process_clicked, variable=self.ctrl.tk_vars['abs_process'])
        self.tk_wids['abs_process'].grid(row=0, column=1, columnspan=2, sticky='w')

        Label(abs_frm, text='Absolute MS File:', bg=BGGRAY, font=LBLBOLD).grid(row=1, column=0, sticky='e')
        self.tk_wids['abs_ms_file'] = Entry(abs_frm, font=FIXEDBOLDFONT, width=72,
            textvariable=self.ctrl.tk_vars['abs_ms_file'])
        self.tk_wids['abs_ms_file'].grid(row=1, column=1, columnspan=3, sticky='w')
        self.tk_wids['abs_ms_file_button'] = Button(abs_frm, text='Select...', highlightbackground=BGGRAY,
            command=(lambda: self.on_select_datafile_button('abs', self.ctrl.tk_vars['abs_ms_file'])))
        self.tk_wids['abs_ms_file_button'].grid(row=1, column=4, sticky='w')

        Label(abs_frm, text='Start Time (UTC):', bg=BGGRAY, font=LBLBOLD).grid(row=2, column=0, sticky='e')
        self.tk_wids['abs_starttime_iso'] = IsoTimeEntry(abs_frm, font=FIXEDBOLDFONT, width=19,
            textvariable=self.ctrl.tk_vars['abs_starttime_iso'])
        self.tk_wids['abs_starttime_iso'].grid(row=2, column=1, sticky='w')

        Label(abs_frm, text='End Time (UTC):', bg=BGGRAY, font=LBLBOLD).grid(row=2,
                                                                             column=2,
                                                                             sticky='e')
        self.tk_wids['abs_endtime_iso'] = IsoTimeEntry(abs_frm, font=FIXEDBOLDFONT, width=19,
            textvariable=self.ctrl.tk_vars['abs_endtime_iso'])
        self.tk_wids['abs_endtime_iso'].grid(row=2, column=3, sticky='w')

        # REFERENCE DATA Settings
        Label(ref_frm, text='Network Code:', bg=BGGRAY, font=LBLBOLD).grid(row=0,
                                                                           column=0,
                                                                           sticky='e')
        self.tk_wids['ref_network'] = SeedCodeEntry(ref_frm, font=FIXEDBOLDFONT, width=4,
            textvariable=self.ctrl.tk_vars['ref_network'],
            charset_cre=re.compile('[a-zA-Z0-9]*'))
        self.tk_wids['ref_network'].grid(row=0, column=1, sticky='w')

        Label(ref_frm, text='Station Code:', bg=BGGRAY, font=LBLBOLD).grid(row=0,
                                                                           column=2,
                                                                           sticky='e')
        self.tk_wids['ref_station'] = SeedCodeEntry(ref_frm, font=FIXEDBOLDFONT, width=6,
            textvariable=self.ctrl.tk_vars['ref_station'],
             charset_cre=re.compile('[a-zA-Z0-9]*'))
        self.tk_wids['ref_station'].grid(row=0, column=3, sticky='w')

        Label(ref_frm, text='Location Code:', bg=BGGRAY, font=LBLBOLD).grid(row=0,
                                                                            column=4,
                                                                            sticky='e')
        self.tk_wids['ref_location'] = SeedCodeEntry(ref_frm, font=FIXEDBOLDFONT, width=4,
            textvariable=self.ctrl.tk_vars['ref_location'],
            charset_cre=re.compile('[a-zA-Z0-9_]*'))
        self.tk_wids['ref_location'].grid(row=0, column=5, sticky='w')

        self.cur_file_lbl = Label(tray_frm, text='File:', bg='#EEE', font=FIXEDBOLDFONT)
        self.cur_file_lbl.grid(row=0, column=0, sticky='w')


        # set Key up event handler for all Entry fields
        self.tk_wids['correlation_segment_size_secs'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['segment_size_secs'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['segment_size_trim_secs'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['coherence_cutoff'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['analysis_sample_rate_hz'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['analysis_bandpass_hz_start'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['analysis_bandpass_hz_end'].bind('<Any-KeyRelease>', self.keyrelease_handler)

        self.tk_wids['station'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['pri_sensor_chans'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['pri_sensor_loc'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['sec_sensor_chans'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['sec_sensor_loc'].bind('<Any-KeyRelease>', self.keyrelease_handler)

        self.tk_wids['azi_ms_file'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['azi_starttime_iso'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['azi_endtime_iso'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['abs_ms_file'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['abs_starttime_iso'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['abs_endtime_iso'].bind('<Any-KeyRelease>', self.keyrelease_handler)

        self.tk_wids['ref_network'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['ref_station'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['ref_location'].bind('<Any-KeyRelease>', self.keyrelease_handler)

    def keyrelease_handler(self, event):
        self.set_modified(True)
        self.refresh_ui()

    def pri_sensor_installed_clicked(self):
        self.set_modified(True)
        self.refresh_ui()

    def sec_sensor_installed_clicked(self):
        self.set_modified(True)
        self.refresh_ui()

    def azi_process_clicked(self):
        self.set_modified(True)
        self.refresh_ui()

    def abs_process_clicked(self):
        self.set_modified(True)
        self.refresh_ui()

    def refresh_ui(self):

        if not self.ctrl.is_valid('station'):
            self.tk_wids['station'].config(bg=BGERR)
        else:
            self.tk_wids['station'].config(bg=BGOK)

        installed = self.ctrl.tk_vars['pri_sensor_installed'].get()
        if installed:
            self.tk_wids['pri_sensor_chans'].config(state=NORMAL)
            self.tk_wids['pri_sensor_loc'].config(state=NORMAL)
        else:
            self.tk_wids['pri_sensor_chans'].config(state=DISABLED)
            self.tk_wids['pri_sensor_loc'].config(state=DISABLED)

        if not self.ctrl.is_valid('pri_sensor_chans'):
            self.tk_wids['pri_sensor_chans'].config(bg=BGERR)
        else:
            self.tk_wids['pri_sensor_chans'].config(bg=BGOK)

        if not self.ctrl.is_valid('pri_sensor_loc'):
            self.tk_wids['pri_sensor_loc'].config(bg=BGERR)
        else:
            self.tk_wids['pri_sensor_loc'].config(bg=BGOK)

        installed = self.ctrl.tk_vars['sec_sensor_installed'].get()
        if installed:
            self.tk_wids['sec_sensor_chans'].config(state=NORMAL)
            self.tk_wids['sec_sensor_loc'].config(state=NORMAL)
        else:
            self.tk_wids['sec_sensor_chans'].config(state=DISABLED)
            self.tk_wids['sec_sensor_loc'].config(state=DISABLED)

        if not self.ctrl.is_valid('sec_sensor_chans'):
            self.tk_wids['sec_sensor_chans'].config(bg=BGERR)
        else:
            self.tk_wids['sec_sensor_chans'].config(bg=BGOK)

        if not self.ctrl.is_valid('sec_sensor_loc'):
            self.tk_wids['sec_sensor_loc'].config(bg=BGERR)
        else:
            self.tk_wids['sec_sensor_loc'].config(bg=BGOK)


        process = self.ctrl.tk_vars['azi_process'].get()
        if process:
            self.tk_wids['azi_ms_file'].config(state=NORMAL)
            self.tk_wids['azi_starttime_iso'].config(state=NORMAL)
            self.tk_wids['azi_endtime_iso'].config(state=NORMAL)
            self.tk_wids['azi_ms_file_button'].config(state=NORMAL)
        else:
            self.tk_wids['azi_ms_file'].config(state=DISABLED)
            self.tk_wids['azi_starttime_iso'].config(state=DISABLED)
            self.tk_wids['azi_endtime_iso'].config(state=DISABLED)
            self.tk_wids['azi_ms_file_button'].config(state=DISABLED)

        if not self.ctrl.is_valid('azi_ms_file'):
            self.tk_wids['azi_ms_file'].config(bg=BGERR)
        else:
            self.tk_wids['azi_ms_file'].config(bg=BGOK)

        if not self.ctrl.is_valid('azi_starttime_iso'):
            self.tk_wids['azi_starttime_iso'].config(bg=BGERR)
        else:
            self.tk_wids['azi_starttime_iso'].config(bg=BGOK)

        if not self.ctrl.is_valid('azi_endtime_iso'):
            self.tk_wids['azi_endtime_iso'].config(bg=BGERR)
        else:
            self.tk_wids['azi_endtime_iso'].config(bg=BGOK)

        process = self.ctrl.tk_vars['abs_process'].get()
        if process:
            self.tk_wids['abs_ms_file'].config(state=NORMAL)
            self.tk_wids['abs_starttime_iso'].config(state=NORMAL)
            self.tk_wids['abs_endtime_iso'].config(state=NORMAL)
            self.tk_wids['abs_ms_file_button'].config(state=NORMAL)
        else:
            self.tk_wids['abs_ms_file'].config(state=DISABLED)
            self.tk_wids['abs_starttime_iso'].config(state=DISABLED)
            self.tk_wids['abs_endtime_iso'].config(state=DISABLED)
            self.tk_wids['abs_ms_file_button'].config(state=DISABLED)

        if not self.ctrl.is_valid('abs_ms_file'):
            self.tk_wids['abs_ms_file'].config(bg=BGERR)
        else:
            self.tk_wids['abs_ms_file'].config(bg=BGOK)

        if not self.ctrl.is_valid('abs_starttime_iso'):
            self.tk_wids['abs_starttime_iso'].config(bg=BGERR)
        else:
            self.tk_wids['abs_starttime_iso'].config(bg=BGOK)

        if not self.ctrl.is_valid('abs_endtime_iso'):
            self.tk_wids['abs_endtime_iso'].config(bg=BGERR)
        else:
            self.tk_wids['abs_endtime_iso'].config(bg=BGOK)


        if not self.ctrl.is_valid('correlation_segment_size_secs'):
            self.tk_wids['correlation_segment_size_secs'].config(bg=BGERR)
        else:
            self.tk_wids['correlation_segment_size_secs'].config(bg=BGOK)

        if not self.ctrl.is_valid('segment_size_secs'):
            self.tk_wids['segment_size_secs'].config(bg=BGERR)
        else:
            self.tk_wids['segment_size_secs'].config(bg=BGOK)

        if not self.ctrl.is_valid('segment_size_trim_secs'):
            self.tk_wids['segment_size_trim_secs'].config(bg=BGERR)
        else:
            self.tk_wids['segment_size_trim_secs'].config(bg=BGOK)

        if not self.ctrl.is_valid('coherence_cutoff'):
            self.tk_wids['coherence_cutoff'].config(bg=BGERR)
        else:
            self.tk_wids['coherence_cutoff'].config(bg=BGOK)

        if not self.ctrl.is_valid('analysis_sample_rate_hz'):
            self.tk_wids['analysis_sample_rate_hz'].config(bg=BGERR)
        else:
            self.tk_wids['analysis_sample_rate_hz'].config(bg=BGOK)

        if not self.ctrl.is_valid('analysis_bandpass_hz_start'):
            self.tk_wids['analysis_bandpass_hz_start'].config(bg=BGERR)
        else:
            self.tk_wids['analysis_bandpass_hz_start'].config(bg=BGOK)

        if not self.ctrl.is_valid('analysis_bandpass_hz_end'):
            self.tk_wids['analysis_bandpass_hz_end'].config(bg=BGERR)
        else:
            self.tk_wids['analysis_bandpass_hz_end'].config(bg=BGOK)


        if not self.ctrl.is_valid('ref_network'):
            self.tk_wids['ref_network'].config(bg=BGERR)
        else:
            self.tk_wids['ref_network'].config(bg=BGOK)

        if not self.ctrl.is_valid('ref_station'):
            self.tk_wids['ref_station'].config(bg=BGERR)
        else:
            self.tk_wids['ref_station'].config(bg=BGOK)

        if not self.ctrl.is_valid('ref_location'):
            self.tk_wids['ref_location'].config(bg=BGERR)
        else:
            self.tk_wids['ref_location'].config(bg=BGOK)


    def set_refdata_state(self, dataset, enabled):
        pass

    # def station_isvalid(self, station):
    #
    #     station_re = r'[a-zA-Z0-9]{3,5}'
    #     match = re.fullmatch(station_re, station)
    #     return not (match == None)


    def exit(self, event=None):
        if (not self.cfg_modified) or \
                messagebox.askyesno("Confirm Quit",
                                    "You will lose unsaved changes.\n\nDo you wish to Quit?"):
            self.root.destroy()


app = Configurator()
