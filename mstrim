#!/usr/bin/env python3
#######################################################################################################################
# Copyright (C) 2016  Regents of the University of California
#
# This is free software: you can redistribute it and/or modify it under the terms of the
# GNU General Public License (GNU GPL) as published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# A copy of the GNU General Public License can be found in LICENSE.TXT in the root of the source code repository.
# Additionally, it can be found at http://www.gnu.org/licenses/.
#
# NOTES: Per GNU GPLv3 terms:
#   * This notice must be kept in this source file
#   * Changes to the source must be clearly noted with date & time of change
#
# If you use this software in a product, an explicit acknowledgment in the product documentation of the contribution
# by Project IDA, Institute of Geophysics and Planetary Physics, UCSD would be appreciated but is not required.
#######################################################################################################################
import argparse
import datetime
import sys

from fabulous.color import red, green, bold

version = '1.0.0'
parser = argparse.ArgumentParser(description="Trim miniseed data from stdin to starttime and endtime.")
parser.add_argument('starttime', action="store", default='',
                    help="START time in either  YYYY-JJJ:HH:MM:SS[.sss]  or  YYYY-MM-DD:HH:MM:SS[.sss] formats (UTC assumed). " + \
                         "Time is optional. 00:00:00 assumed if not supplied")
parser.add_argument('endtime', action="store", default='',
                    help="END time in either  YYYY-JJJ:HH:MM:SS[.sss]  or  YYYY-MM-DD:HH:MM:SS[.sss] formats (UTC assumed). " + \
                         "Time is optional. 23:59:99.999 assumed if not supplied")
parser.add_argument('-v', '--version', action='version', version=version)

args = parser.parse_args()

import ida.utils

# check date param formats. Allow date without times
start_t = args.starttime
dpart = start_t.split(':')[0]
if len(start_t) in [8, 10]:  # date only supplied
    start_t = start_t + ":00:00:00.000"

try:
    if len(dpart) == 8:
        if len(start_t) == 17:  # DOY format w/o fractions of second
            start_t = start_t + '.000'
        start_datetime = datetime.datetime.strptime(start_t, '%Y-%j:%H:%M:%S.%f')

    elif len(dpart) == 10:
        if len(start_t) == 19:  # y-m-d format w/o fractions of second
            start_t = start_t + '.000'
        start_datetime = datetime.datetime.strptime(start_t, '%Y-%m-%d:%H:%M:%S.%f')
    else:
        print(red(bold('FATAL Error: Invalid START time: {}. '.format(start_t))), file=sys.stderr)
        args.print_help()
        sys.exit(1)

except:
    print(red(bold('FATAL ERROR: Invalid START time: {}. '.format(start_t))), file = sys.stderr)
    args.print_help()
    sys.exit(1)

end_t = args.endtime
dpart = end_t.split(':')[0]
if len(end_t) in [8, 10]:  # date only supplied
    end_t = end_t + ":23:59:59.999"
try:
    if len(dpart) == 8:  # DOY format
        if len(end_t) == 17:
            end_t = end_t + ".000"  # entered time, but no fractional seconds, set to 0
        end_datetime = datetime.datetime.strptime(end_t, '%Y-%j:%H:%M:%S.%f')

    elif len(dpart) == 10:  # y-m-d format
        if len(end_t) == 19:
            end_t = end_t + ".000"  # entered time, but no fractional seconds, set to 0
        end_datetime = datetime.datetime.strptime(end_t, '%Y-%m-%d:%H:%M:%S.%f')

    else:
        print(red(bold('FATAL Error: Invalid END time: {}. '.format(end_t))), file=sys.stderr)
        args.print_help()
        sys.exit(1)

except:
    print(red(bold('FATAL Error: Invalid END time: {}. '.format(end_t))), file=sys.stderr)
    args.print_help()
    sys.exit(1)

if start_datetime > datetime.datetime.utcnow():
    print(red(bold("FATAL ERROR: START time can not be after NOW. Maybe tomorrow you'll have better luck in the future.")),
          file = sys.stderr)
    sys.exit(1)

if end_datetime > datetime.datetime.utcnow():
    print(red(bold('WARNING: END time can not be in the future. Time travel not yet implemented. Setting END to NOW.')),
          file = sys.stderr)
    end_datetime = datetime.datetime.utcnow()

if start_datetime > end_datetime:
    print(red(bold("FATAL ERROR: START time can not be after the END time. That's just whacky.")),
          file = sys.stderr)
    sys.exit(1)

# at long last...
ida.utils.mstrim(start_datetime, end_datetime)

