#!/usr/bin/env python3
"""Script to analyze IDA RAndom Binary calibration data"""
#######################################################################################
# Copyright (C) 2016  Regents of the University of California
#
# This is free software: you can redistribute it and/or modify it under the terms of
# the GNU General Public License (GNU GPL) as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# A copy of the GNU General Public License can be found in LICENSE.TXT in the root of
# the source code repository. It can also be found at http://www.gnu.org/licenses/
#
# NOTES: Per GNU GPLv3 terms:
#   * This notice must be kept in this source file
#   * Changes to the source must be clearly noted with date & time of change
#
# If you use this software in a product, an explicit acknowledgment in the product
# documentation of the contribution by Project IDA, Institute of Geophysics and
# Planetary Physics, UCSD would be appreciated but is not required.
#######################################################################################
import os
import sys
import argparse
import shutil
from pathlib import Path
from os.path import exists

import matplotlib
matplotlib.use('Qt4Agg')
import matplotlib.pyplot as plt
from fabulous.color import bold, blue, red
from numpy import pi, cos, sin, multiply, divide, median, polyfit, polyval
from numpy import linspace, less, greater_equal, less_equal, logical_and


version = '1.6.0'

epi = """This application will analyze the random binary
calibration data obtained from the Q330 digitizer using IDA's qcal application."""

parser = argparse.ArgumentParser(description='IDA Random Binary Analysis',
                                epilog=epi)
parser.add_argument('-v', '--version', action='version', version=version)

subparsers = parser.add_subparsers(help='Database Access Mode')

cfgparser = subparsers.add_parser('nodb', help='Do not use internal IDA Database.')
cfgparser.add_argument('comp', help='Component to analyze (z, 1, 2)',
                       choices=['z', '1', '2'])
cfgparser.add_argument('chancode', help='Channel Code')
cfgparser.add_argument('config', help='Configuration File (YAML)')
cfgparser.set_defaults(mode='nodb')

interparser = subparsers.add_parser('idadb', help='Use internal IDA Database.')
interparser.add_argument('sta', help="IDA Station code", default='')
interparser.add_argument('loc', help="IDA Location code", default='')
interparser.set_defaults(mode='idadb')

args = parser.parse_args()

from ida import IDA_PKG_VERSION_HASH_STR, IDA_PKG_VERSION_DATETIME
from ida.tui import input_yn, select, SelectResult
from ida.instruments import CALTYPE_RBLF, CALTYPE_RBHF, CALTYPE_RBLF_SAMPLERATE, \
       Q330_FIR_GAIN_1HZ, Q330_FIR_FILTER_DELAY, Q330_FIR_COEFFS
from ida.ctbto.messages import ims2_calibrate_result_msg_header, \
       ims2_calibrate_result_msg_comp_info, ims2_paz2_msg, ims2_dig2_msg, ims2_fir2_msg
from ida.signals.utils import compute_response
from ida.calibration.cross import cross_correlate
from ida.calibration.plots import cross_tf_plot, save_comp_response_comparison_plot
from ida.calibration.cal_info import CalInfo
from ida.calibration.process import prepare_cal_data, analyze_cal_component, \
      compare_component_response


def main(cl_args):
    """Main function of script"""

    cal_raw_dir = os.environ.get('IDA_CAL_RAW_DIR')
    nom_paz_dir = os.environ.get('IDA_RESPONSES_NOM_DIR')
    cur_paz_dir = os.environ.get('IDA_RESPONSES_CUR_DIR')
    datascopedb_dir = os.environ.get('IDA_DATASCOPEDB_DIR')

    # check env for required vars
    env_ok = True
    if cl_args.mode == 'idadb':
       # if not using config file, using IDA file struct and datascopedb and these must be set.
       if (not cal_raw_dir):
           print(red(bold('The root directory of raw calibration data must be specified with --cal-raw-dir ' + \
                          'or by setting the IDA_CAL_RAW_DIR environment variable.')))
           env_ok = False
       elif not exists(cal_raw_dir):
           print(bold(red('Error: Cal Raw directory [' + cal_raw_dir + '] does not exist.')))
           env_ok = False

       if (not datascopedb_dir):
           print(red(bold('Required metadata is unavailable. You must specify the directory ' + \
                          'containing the IDA Datascope DB files with --datascopedb-dir\n' + \
                          'OR\nwith the IDA_DATASCOPEDB_DIR environment variable\n' + \
                          'OR\nor specify configuration file with --config <yaml-filename>' + \
                          'instead of using the Dtaascope DB.')))
           env_ok = False
       elif not exists(datascopedb_dir):
           print(bold(red('Error: Datascope directory [' + datascopedb_dir + '] does not exist.')))
           env_ok = False

       if (not nom_paz_dir):
           print(red(bold('The directory containing NOMINAL sensor poles and zeros response ' + \
                          'files must be specified with --nom-paz-dir ' + \
                          'or with the IDA_RESPONSES_NOM_DIR environment variable.')))
           env_ok = False
       elif not exists(nom_paz_dir):
           print(red(bold('Error: Nominal Response directory [' + nom_paz_dir+ '] does not exist.')))
           env_ok = False

       if (not cur_paz_dir):
           print(red(bold('The directory containing CURRENT/ACTUAL sensor poles and zeros response ' + \
                          'files must be specified with --cur-paz-dirdir ' + \
                          'or with the IDA_RESPONSES_CUR_DIR environment variable.')))
           env_ok = False
       elif not exists(cur_paz_dir):
           print(red(bold('Error: Current Response directory [' + cur_paz_dir+ '] does not exist.')))
           env_ok = False

       if not env_ok:
           print(red('Quitting due to incomplete environment.'))
           sys.exit(1)

       ci = CalInfo(sta=cl_args.sta.lower(), loc=cl_args.loc,
                    cal_raw_dir=cal_raw_dir, cur_paz_dir=cur_paz_dir,
                    nom_paz_dir=nom_paz_dir, db_dir=datascopedb_dir)

    else:
       ci = CalInfo(comp=cl_args.comp.lower(), chancode=cl_args.chancode,
                    config_file=cl_args.config)

    if not ci.ok:
       print(red('\nQuitting due to error in configuration file or environment.'))
       sys.exit(1)


    ndnt = ci.tui_indent + 1

    if ci.collect_info():

        cur_dir = os.getcwd()
        output_filename_list = []

        analysis_date = ci.lfdatestr if ci.lfdatestr else ci.hfdatestr

        print(' ' * ndnt + bold('All analysis output will be saved in:'),
              bold(blue(cur_dir)))

        # copy in starting reponse file
        aname = Path(ci.respfn).stem + '_start_{}'.format(ci.comp) + Path(ci.respfn).suffix
        if 'ipaz' not in aname:
            aname = aname + '.ipaz'
        shutil.copy2(ci.respfn, os.path.join(cur_dir, aname))
        output_filename_list.append(os.path.join(cur_dir, aname))

        # set up for matplotlib and TF plots
        plt.ion()
        green_tol_limits = (1.0, 1.0)  # (amp_pcnt, pha_deg, coh)
        grey_tol_limits = (5.0, 5.0)  # (amp_pcnt, pha_deg, coh)

        fit_paz = ci.fullpaz
        new_paz = ci.fullpaz

        cal_start_time = None

        if not ci.omit_lf:

            ci.print_info()

            print(' ' * ndnt + bold(
                'Computing LOW FREQ TF with starting response for: {}'.format(
                    ci.comp)))
            samp_rate_lf, lf_start_time, lfinput, lfmeas, _, _, _, _, \
            freqs_lf, _, snr_lf, _ = prepare_cal_data(ci.lfpath, ci.lffile,
                                                      None, None, ci.sensor,
                                                      ci.comp, ci.fullpaz, ci.opsr)
            cal_start_time = lf_start_time

            # compute LF TF (and plot fig)
            lftf_f, lftf_amp, lftf_pha, lftf_pha_detrnd, \
            _, lf_fig_start = gen_tf_and_fig(ci, samp_rate_lf,
                                             lfinput,
                                             lfmeas, CALTYPE_RBLF,
                                             green_tol_limits,
                                             grey_tol_limits)

            # construct filename for starting response plot
            fname = '{}_{}_{}_tf_lf_start_{}.png'.format(ci.sensor.lower(),
                                                         ci.sta.lower(), ci.loc,
                                                         ci.comp)
            # save plot and add to list of output files
            fnpath = os.path.join(cur_dir, fname)
            lf_fig_start.savefig(fnpath, dpi=400)
            output_filename_list.append(fnpath)

            # prompt user for action
            action = fit_menu(
                [('F', 'Fit New LOW FREQ Response'),
                 ('A', 'Accept Current LOW FREQ Response')]).upper()

            if action == 'Q':
                # if 'Q' quitting, get rid of output files and quit
                clean_analysis_files(output_filename_list)
                user_quit()

            # fitting loop while user wants to try a new fit
            while action == 'F':

                # prompt for list of poles/zeros to perturb
                res, _ = ci.select_perturb_map(CALTYPE_RBLF)
                if res == SelectResult.quit:
                    clean_analysis_files(output_filename_list)
                    user_quit()

                ci.print_info()

                print(' '*ndnt + bold('\nFitting new LOW FREQ reponse for: {}'.format(ci.comp)))

                # construct complex form of TF to minimize when for fitting
                lftf = multiply(lftf_amp, (cos(lftf_pha * pi / 180) + 1j * sin(lftf_pha * pi / 180)))

                # fit new poles and zeros and set gain to 1
                fit_paz = analyze_cal_component(ci.fullpaz, ci.lfpert,
                                                ci.hfpert, ci.opsr, lftf_f,
                                                lftf, None, None, CALTYPE_RBLF)
                fit_paz.h0 = 1

                print(' '*ndnt + bold('Recomputing LOW FREQ TF with new fit response for: {}'.format(ci.comp)))

                # compute freq response with new fit_paz
                samp_rate_lf, lf_start_time, lfinput, lfmeas, _, _, _, _, freqs_lf, freqs_hf, \
                snr_lf, snr_hf = prepare_cal_data(ci.lfpath, ci.lffile, None, None,
                                                  ci.sensor, ci.comp, fit_paz, ci.opsr)

                # compute new TF with new fit_paz and plot fig
                lftf_f, fit_lftf_amp, fit_lftf_pha, fit_lftf_pha_detrnd, \
                fit_lftf_coh, lf_fig_fit = gen_tf_and_fig(ci, samp_rate_lf, lfinput, lfmeas, CALTYPE_RBLF,
                                                          green_tol_limits, grey_tol_limits)

                # prompt user for action
                action = fit_menu([('F', 'Fit New LOW FREQ Response'),
                                   ('A', 'Accept Current LOW FREQ Response'),
                                   ('S', 'Use Starting Response')]).upper()
                if action == 'Q':
                    clean_analysis_files(output_filename_list)
                    user_quit()

                # accepting new fit...
                if action == 'A':
                    # save fit_paz as starting point for HF analysis
                    new_paz = fit_paz

                    # save LF TF for CTBTO 'inspec' calculation and plot to output file list
                    lftf_amp = fit_lftf_amp
                    lftf_pha = fit_lftf_pha
                    lftf_pha_detrnd = fit_lftf_pha_detrnd
                    fname = '{}_{}_{}_tf_lf_fit_{}.png'.format(
                        ci.sensor.lower(), ci.sta.lower(), ci.loc, ci.comp)
                    fnpath = os.path.join(cur_dir, fname)
                    lf_fig_fit.savefig(fnpath, dpi=400)
                    output_filename_list.append(fnpath)

                elif action == 'S':
                    # using starting paz instead of fit
                    new_paz = ci.fullpaz

                plt.close(lf_fig_fit)

            plt.close(lf_fig_start)

        if not ci.omit_hf:

            ci.print_info()

            print(' ' * ndnt + bold(
                'Computing HIGH FREQ TF with starting response for: {}'.format(
                    ci.comp)))
            _, _, _, _, samp_rate_hf, hf_start_time, hfinput, hfmeas, \
            _, freqs_hf, _, snr_hf = prepare_cal_data(None, None, ci.hfpath, ci.hffile,
                                                      ci.sensor, ci.comp, new_paz, ci.opsr)
            cal_start_time = min(
                cal_start_time,
                hf_start_time) if cal_start_time else hf_start_time

            # compute HF TF (and plot fig)
            hftf_f, hftf_amp, hftf_pha, hftf_pha_detrnd, hftf_coh, hf_fig_start = gen_tf_and_fig(
                ci, samp_rate_hf, hfinput, hfmeas, CALTYPE_RBHF,
                green_tol_limits, grey_tol_limits)

            # construct filename for starting response plot
            fname = '{}_{}_{}_tf_hf_start_{}.png'.format(ci.sensor.lower(),
                                                         ci.sta.lower(), ci.loc,
                                                         ci.comp)
            # save plot and add to list of output files
            fnpath = os.path.join(cur_dir, fname)
            hf_fig_start.savefig(fnpath, dpi=400)
            output_filename_list.append(fnpath)

            # prompt user for action
            action = fit_menu([('F', 'Fit New HIGH FREQ Response'), (
                'A', 'Accept Current HIGH FREQ Response')]).upper()

            if action == 'Q':
                # if 'Q' quitting, get rid of output files and quit
                clean_analysis_files(output_filename_list)
                user_quit()

            # fitting loop while user wants to try a new fit
            while action == 'F':

                # prompt for list of poles/zeros to perturb from paz resulting from LF fit/analysis
                res, err = ci.select_perturb_map(CALTYPE_RBHF, paz=new_paz)
                if res == SelectResult.quit:
                    clean_analysis_files(output_filename_list)
                    user_quit()

                ci.print_info()

                print(' ' * ndnt + bold('\nFitting new HIGH FREQ reponse for: {}'.format(ci.comp)))

                # construct complex form of HF TF to minimize when for fitting
                hftf = multiply(hftf_amp, (cos(hftf_pha * pi / 180) + 1j * sin(hftf_pha * pi / 180)))

                # fit new poles and zeros and set gain to 1
                fit_paz = analyze_cal_component(new_paz, ci.lfpert, ci.hfpert,
                                                ci.opsr, None, None, hftf_f,
                                                hftf, CALTYPE_RBHF)
                fit_paz.h0 = 1

                print(' ' * ndnt + bold('Recomputing HIGH FREQ TF with new fit response for: {}'.format(ci.comp)))

                # compute freq response with new fit_paz
                _, _, _, _, samp_rate_hf, hf_start_time, hfinput, hfmeas, \
                _, freqs_hf, _, snr_hf = prepare_cal_data(None, None, ci.hfpath, ci.hffile,
                                                          ci.sensor, ci.comp, fit_paz, ci.opsr)

                # compute new TF with new fit_paz and plot fig
                hftf_f, fit_hftf_amp, fit_hftf_pha, fit_hftf_pha_detrnd, \
                fit_hftf_coh, hf_fig_fit = gen_tf_and_fig(ci, samp_rate_hf, hfinput, hfmeas, CALTYPE_RBHF,
                                                          green_tol_limits, grey_tol_limits
                    )

                # prompt user for action
                action = fit_menu([('F', 'Fit New HIGH FREQ Response'),
                                   ('A', 'Accept Current HIGH FREQ Response'),
                                   ('S', 'Use Starting Response')]).upper()
                if action == 'Q':
                    clean_analysis_files(output_filename_list)
                    user_quit()

                if action == 'A':
                    # save fit_paz as final fit paz
                    new_paz = fit_paz

                    # save HF TF for CTBTO 'inspec' calculation and plot to output file list
                    hftf_amp = fit_hftf_amp
                    hftf_pha = fit_hftf_pha
                    hftf_pha_detrnd = fit_hftf_pha_detrnd
                    fname = '{}_{}_{}_tf_hf_fit_{}.png'.format(
                        ci.sensor.lower(), ci.sta.lower(), ci.loc, ci.comp)
                    fnpath = os.path.join(cur_dir, fname)
                    hf_fig_fit.savefig(fnpath, dpi=400)
                    output_filename_list.append(fnpath)
                elif action == 'S':
                    pass  # new_paz is already set from LF analysis or initial ci.fullpaz. Same for HF TF

                plt.close(hf_fig_fit)

            plt.close(hf_fig_start)

        # save new paz file
        new_fn = os.path.join(cur_dir, ci.new_filename_stem() + '.ipaz')
        new_paz.save(new_fn)
        output_filename_list.append(new_fn)
        print('\n' + ' ' * ndnt +bold('Response saved to file for: {}'.format(ci.comp)), bold(blue(new_fn)))


        if (new_paz != ci.fullpaz) or \
            (ci.is_ctbto() and (not ci.omit_lf) and (not ci.omit_hf)):
            # need to compute freq response for comparison plots (if response changed)
            # OR for ctbto EVEN IF NO CHANGE
            print(' ' * ndnt + bold('Computing frequency response for: {}'.format(ci.comp)))

            # lets find "nice" number for resp length: i.e. a multiple of 20 * sample rate.
            # So 0.05 and 1 hz in freqs exactly.
            resp_len = 360000
            freqs, _ = linspace(0, ci.opsr / 2, resp_len + 1, retstep=True)  # must start with 0hz

            # compare orig and new freq responses and calculate amp and pha deviations
            bl_resp, new_resp, adev, pdev, _, _ = compare_component_response(
                freqs,
                ci.fullpaz,
                new_paz,
                norm_freq=0.05,
                mode='vel',
                phase_detrend=True)

            # if new response, generate amp and pha response and deviation plots
            if new_paz != ci.fullpaz:
                # only do comparison plots if response changed
                amp_fn = os.path.join(
                    cur_dir,
                    ci.new_filename_stem() + '_AMP_Resp_' + ci.comp + '.png')
                pha_fn = os.path.join(
                    cur_dir,
                    ci.new_filename_stem() + '_PHA_Resp_' + ci.comp + '.png')
                amp_fig, pha_fig = save_comp_response_comparison_plot(
                    ci.sta.upper(),
                    ci.chan.upper(), ci.loc,
                    Path(ci.respfn).stem,
                    Path(new_fn).stem,
                    ci.sensor.upper(), cal_start_time, ci.opsr, resp_len + 1,
                    1.0, bl_resp, new_resp, adev, pdev)
                amp_fig.savefig(amp_fn, dpi=400)
                output_filename_list.append(amp_fn)
                pha_fig.savefig(pha_fn, dpi=400)
                output_filename_list.append(pha_fn)

            # can only provide CTBTO analysis IF both LF and HF have been analyzed
            if ci.is_ctbto() and (not ci.omit_lf) and (not ci.omit_hf):

                # compute freq bands for comparison
                hf_freqs_in_band = less_equal(hftf_f, 0.9 * 0.5 * ci.opsr)
                lf_freqs_in_band = less_equal(lftf_f, 0.9 * 0.5 *
                                              CALTYPE_RBLF_SAMPLERATE)

                # check that new TF is 'inspec'.
                # For IDA that is amp within 5% of 1.0 and pha within 5-degrees of 0.0
                ctbto_inspec_lf = 'YES' if (lftf_amp[lf_freqs_in_band].min() >= 0.95) and \
                                           (lftf_amp[lf_freqs_in_band].max() <= 1.05) and \
                                           (lftf_pha_detrnd[lf_freqs_in_band].min() >= -5) and \
                                           (lftf_pha_detrnd[lf_freqs_in_band].max() <= 5) else 'NO'

                ctbto_inspec_hf = 'YES' if (hftf_amp[hf_freqs_in_band].min() >= 0.95) and \
                                        (hftf_amp[hf_freqs_in_band].max() <= 1.05) and \
                                        (hftf_pha_detrnd[hf_freqs_in_band].min() >= -5) and \
                                        (hftf_pha_detrnd[hf_freqs_in_band].max() <= 5) else 'NO'

                if (ctbto_inspec_lf == 'YES') and (ctbto_inspec_hf == 'YES'):
                    ctbto_inspec = 'YES'
                else:
                    ctbto_inspec = 'NO'

                # alert operator if not 'inspec' for CTBTO
                if ctbto_inspec == 'NO':
                    print('\n', ' ' * ndnt + bold(
                        red('HEADS UP: Does not meet CTBTO IN_SPEC Criteria!')
                    ), '\n')
                    if ctbto_inspec_lf != 'YES':
                        print(red('LF is out of spec (amp: 0.95 to 1.05; pha -5 to +5)'))
                    if ctbto_inspec_hf != 'YES':
                        print(red('HF is out of spec (amp: 0.95 to 1.05; pha -5 to +5)'))

                # compute new a0 (using pre-normalized response)
                calper = 1.0
                bin_calper_ndx = min([
                    freq[0] for freq in enumerate(freqs)
                    if freq[1] >= (1 / calper)
                ])
                resp_at_calper = compute_response(calper, new_paz)
                a0 = 1 / abs(resp_at_calper[0])

                # system sens to compute calib
                sens_gnom = ci.sensor_gnom()
                sens_gcal = ci.sensor_gcalib()
                q330_gnom = ci.q330_gnom()
                q330_gcal = ci.q330_gcalib()

                # compute sensitivity for 1st, 3rd, 4th stages
                s1_sens = abs(new_resp[bin_calper_ndx]) * sens_gnom * sens_gcal
                s3_sens = q330_gnom * q330_gcal
                s4_sens = Q330_FIR_GAIN_1HZ[int(ci.opsr)]
                sys_sens = s1_sens * s3_sens * s4_sens

                # convert velocity (cts/(m/s)) to disp (cts/m) then to nm/ct
                calib = 1 / (sys_sens * (2 * pi) / 1e9)

                # construct CTBTO IMS message components
                ims2_header = ims2_calibrate_result_msg_header(cal_start_time)
                comp_info = ims2_calibrate_result_msg_comp_info(
                    ci.sta.upper(), ci.chan, ctbto_inspec, calib, calper)
                sensor_info = ims2_paz2_msg(ci.sta.upper(), ci.loc, ci.chan,
                                            ci.sensor.upper(), cal_start_time,
                                            ci.opsr, calib, calper, new_paz,
                                            a0 * sens_gnom * sens_gcal)
                digi_info = ims2_dig2_msg(2, q330_gnom * q330_gcal,
                                          ci.opsr, 'Q330') + '\n' + \
                                          ims2_fir2_msg(3, 1.0, 1,
                                                        Q330_FIR_FILTER_DELAY[int(ci.opsr)], 'A',
                                                        'Q330 Fir filter @ {}Hz'.format(ci.opsr),
                                                        Q330_FIR_COEFFS[int(ci.opsr)])

                # save IMS message HDR
                ims_msg_hdr_fn = os.path.join(
                    cur_dir, 'IMS2_CR_{}_{}_{}_HDR.txt'.format(
                        ci.sta.upper(),
                        ci.sensor.upper(), analysis_date.replace('-', '')))
                with open(ims_msg_hdr_fn, 'wt') as ofl:
                    ofl.write(ims2_header + '\n')
                    output_filename_list.append(ims_msg_hdr_fn)

                # save IMS message bloick for current sensor component
                ims_msg_comp_fn = os.path.join(
                    cur_dir, 'IMS2_CR_{}_{}_{}_{}.txt'.format(
                        ci.sta.upper(),
                        ci.sensor.upper(),
                        analysis_date.replace('-', ''), ci.comp))
                with open(ims_msg_comp_fn, 'wt') as ofl:
                    ofl.write(comp_info + '\n')
                    ofl.write(sensor_info + '\n')
                    ofl.write(digi_info + '\n')
                    output_filename_list.append(ims_msg_comp_fn)

                # save IMS message footer
                ims_msg_footer_fn = os.path.join(
                    cur_dir, 'IMS2_CR_{}_{}_{}_FOOT.txt'.format(
                        ci.sta.upper(),
                        ci.sensor.upper(), analysis_date.replace('-', '')))
                with open(ims_msg_footer_fn, 'wt') as ofl:
                    ofl.write('STOP\n')
                    output_filename_list.append(ims_msg_footer_fn)

        elif ci.is_ctbto() and (ci.omit_lf or ci.omit_hf):
            # CTBTO analysis requires analysis of both LF and HF data
            print(' ' * ndnt + bold(
                red('WARNING: Can not produce CTBTO results without both LF and HF analysis'
                   )))

        # construct and output analysis log file
        logfn = os.path.join(cur_dir, ci.new_filename_stem() + '.log')
        with open(logfn, 'wt') as ofl:
            ofl.write(str(ci))
            output_filename_list.append(logfn)
            ofl.write('Files saved: \n')
            for fname in output_filename_list:
               ofl.write('   {}\n'.format(fname))
            ofl.write('\nIDA Module Version: {}, ({})\n'.format(IDA_PKG_VERSION_HASH_STR,
                                                                IDA_PKG_VERSION_DATETIME))

        # if IDA_CAL_ANALYSIS_DIR env var is set, prompt to 'publish' result files
        if os.environ.get('IDA_CAL_ANALYSIS_DIR'):
           analysis_path = os.path.join(os.environ.get('IDA_CAL_ANALYSIS_DIR'),
                                        ci.sta, ci.loc, analysis_date)
        else:
           analysis_path = None

        # if running in IDA environment, offer use to publish to IDA analysis dir
        if (ci.mode == 'interactive') and analysis_path and \
           (input_yn('\n' + ' ' * ndnt +
           'Publish {} component results to  {}  (y/n) ? :'.format(
                ci.comp, analysis_path)) == 'Y'):
           if not os.path.exists(analysis_path):
               os.makedirs(analysis_path, exist_ok=True)
           publish_files(analysis_path, output_filename_list)
           print('\n' + ' ' * ndnt + bold(
                 blue('Saved in current working directory and published to:')),
                 bold(analysis_path), '\n')
           for fname in output_filename_list:
              print(bold(' ' * (ndnt * 2) + fname))
        else:

           print('\n' + ' ' * ndnt +
                 bold(blue('Saved in current working directory:')), '\n')
           for fname in output_filename_list:
              print(bold(' ' * (ndnt * 2) + fname))

    input(bold('\nHit ENTER/RETURN to exit...'))


def clean_analysis_files(filelist):
    """Deletes specific list of files form current directory.

    Args:
        filelist (iterable): List of files to remove from current directory
    """
    for filename in filelist:
       if os.path.exists(filename):
          os.remove(filename)

def gen_tf_and_fig(cal_info, data_samp_rate, input_data, meas_data, cal_type,
                   green_tol_limits, grey_tol_limits):
    """Run cross correlation and generate Transfer Function (TF) plot.

    Args:
        cal_info (CalInfo): Instance of CalInfo containing information
                            on calibration being processed
        data_samp_rate (float or int): Sample rate of calibration data
        input_data (ndarray): Input calibration timeseries convolved with response
        meas_data (ndarray):  Output (measured) calibration timeseries
        cal_type (CalType): Either CALTYPE_RBLF or CALTYPE_RBHF
        green_tol_limits ((float, float)): Tuple of amplitude 'green range'
                                           in %, phase 'green range' in degrees
        grey_tol_limits ((float, float)): Tuple of amplitude 'grey range'
                                          in %, phase 'grey range' in degrees

    Returns:
        tf_f (ndarray): Array of transfer function frequencies
        tf_amp (ndarray): Array of transsfer function amplitudes
        tf_pha (ndarray): Array of tranfer function phases
        tf_pha_detrnd (ndarray): Array of tranfer function phases after linear detrend and unwrap
        tf_coh (ndarray): Array of timeseries coherence
        fig (pyplot.figure): Matplotlib containing figure with TF and Coherence plots

    """

    if not cal_type in [CALTYPE_RBLF, CALTYPE_RBHF]:
       raise ValueError('cal_type must be CALTYPE_RBLF or CALTYPE_RBHF. [' + cal_type + ']')

    tf_f, tf_amp, tf_pha, tf_coh, _, _, _, _, _ = cross_correlate(
        data_samp_rate, input_data, meas_data)

    if cal_type == CALTYPE_RBLF:
        eff_samplerate_freq = data_samp_rate
        thedate = cal_info.lfdatestr

        freq_normband = less_equal(tf_f, 0.04 * eff_samplerate_freq)
        # modelled after matlab go_parker.m code:  <=8% of 1hz cal sample rate for LF

    elif cal_type == CALTYPE_RBHF:
        eff_samplerate_freq = cal_info.opsr
        thedate = cal_info.hfdatestr

        freq_normband = logical_and(tf_f > 0.5, tf_f <
                                    (0.35 * eff_samplerate_freq))
        # modelled after matlab go_parker.m code: 5% < freq < 35% of channel samplerate

    # normalize tf_amp
    tf_amp_band_median = median(tf_amp[freq_normband])
    tf_amp = divide(tf_amp, tf_amp_band_median)

    # detrend pha using median coh up to 75% of nyquist
    tf_pha_detrnd = tf_pha.copy()

    # fit trend line to phase over band with "good or better coh", which is
    # defined as median coh at freqs below 75% ofactual sample rate
    median_coh = median(tf_coh[less(tf_f, 0.5 * .75 * data_samp_rate)])
    good_cohs_ndxs = greater_equal(tf_coh, median_coh)
    # fit to straight line
    pha_trend_coeffs = polyfit(tf_f[good_cohs_ndxs], tf_pha[good_cohs_ndxs], 1)
    ph_corr_vals = polyval(pha_trend_coeffs, tf_f)
    # correct pha for trend
    tf_pha_detrnd -= ph_corr_vals

    # unwrap phases
    tf_pha_detrnd[less(tf_pha_detrnd, -180.)] = \
        tf_pha_detrnd[less(tf_pha_detrnd, -180.)] + 360.0

    fig = cross_tf_plot(
        cal_info.sta,
        cal_info.loc,
        cal_info.chan,
        cal_info.sensor,
        thedate,
        cal_type,
        eff_samplerate_freq,
        tf_f,
        tf_amp,
        tf_pha_detrnd,
        tf_coh,
        green_tol_lims=green_tol_limits,
        grey_tol_lims=grey_tol_limits,
        plot_band_limit=0.9)  # plot to 90% of nyquist

    return tf_f, tf_amp, tf_pha, tf_pha_detrnd, tf_coh, fig

def publish_files(target_dir, filelist):
       """Copies files to 'output' directory

       Args:
           target_dir (str): Path of target directory
           filelist (iterable): List of files to copy from current directory to target_dir
       """

       for filename in filelist:
           aname = Path(filename).name
           shutil.copy2(filename, os.path.join(target_dir, aname))

def fit_menu(choice_list):
    """Display and accept user choice of poles/zeros to fit"""
    _, choices, _, _ = select(
        [choice_list],
        title='Select Action',
        prompt='Enter selection ("q" => quit): ',
        implicit_quit_q=True,
        menu_on_error=True,
        err_message='Invalid choice. Please try again')

    return choices[0]


def user_quit():
    """User decided to quit. Print msg and exit"""

    print(bold(red('User quit.')))
    sys.exit(0)


if __name__ == '__main__':
    main(args)
