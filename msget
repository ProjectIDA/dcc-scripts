#!/usr/bin/env python3
#######################################################################################################################
# Copyright (C) 2016-2020  Regents of the University of California
#
# This is free software: you can redistribute it and/or modify it under the terms of the
# GNU General Public License (GNU GPL) as published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# A copy of the GNU General Public License can be found in LICENSE.TXT in the root of the source code repository.
# Additionally, it can be found at http://www.gnu.org/licenses/.
#
# NOTES: Per GNU GPLv3 terms:
#   * This notice must be kept in this source file
#   * Changes to the source must be clearly noted with date & time of change
#
# If you use this software in a product, an explicit acknowledgment in the product documentation of the contribution
# by Project IDA, Institute of Geophysics and Planetary Physics, UCSD would be appreciated but is not required.
#######################################################################################################################
import argparse
import sys
import os
import datetime
from ida.datetime import parsedt
from ida.utils import is_valid_chanloc, msget

from fabulous.color import red, bold

version = '1.0.1'
parser = argparse.ArgumentParser(description="Retrieve MINISEED data from IDA raw ms archives for a single CHANLOC" +
                                             "for arbitrary time range.")
parser.add_argument('station', action="store", default='',
                    help="Station code for which data should be retrieved (case insensitive).")
parser.add_argument('chanloc', action='store', help="A single CHANLOC code. E.g. bhz00. Case insensitive.",
                                                    default='')
parser.add_argument('starttime', action="store", default='',
                    help="START TIME in either  YYYY-JJJ:HH:MM:SS  or  YYYY-MM-DD:HH:MM:SS formats (UTC assumed). " +
                         "Time is optional. 00:00:00 assumed if not supplied")
parser.add_argument('endtime', action="store", default='',
                    help="END TIME in either  YYYY-JJJ:HH:MM:SS  or  YYYY-MM-DD:HH:MM:SS formats (UTC assumed). " +
                         "Time is optional. 23:59:99.999 assumed if not supplied")
parser.add_argument('--net', action="store", default="II", help="Specify NETWORK. Default is 'II'.")
parser.add_argument('--out', '-o', action="store", default=None, help="Specify output file. Default is STDOUT.")
parser.add_argument('--ms-arc-dir', action='store', default=os.environ.get('IDA_ARCHIVE_MS_DIR', '.'),
                    help='Specify an alternate root directory of the MINISEED data archive.')
parser.add_argument('-v', '--version', action='version', version=version)

args = parser.parse_args()

sta = args.station.lower()
chanloc = args.chanloc.lower()
arcdir = args.ms_arc_dir

if not is_valid_chanloc(chanloc):
    print(red(bold(f"Error parsing CHANLOC: {args.chanloc}")), file=sys.stderr)
    parser.print_help()
    sys.exit(1)

start_dt = parsedt(args.starttime)
if not start_dt:
    print(red(bold(f"Error parsing START TIME: {args.starttime}")), file=sys.stderr, flush=True)
    parser.print_help()
    sys.exit(1)

end_dt = parsedt(args.endtime)
if not end_dt:
    print(red(bold(f"Error parsing END TIME: {args.endtime}")), file=sys.stderr)
    parser.print_help()
    sys.exit(1)

# check to see if TIME specified on END. If not, add a day. This is consistent with i10get and mstrim behavior.
if len(args.endtime) in [8, 10]:  # date only supplied, so add a day
    end_dt = end_dt + datetime.timedelta(days=1)

arcdir = os.path.abspath(os.path.expanduser(arcdir))
if not os.path.exists(arcdir) or not os.path.isdir(arcdir):
    print(red(bold(f"MS ARC DIR not found: {arcdir}")), file=sys.stderr, flush=True)
    parser.print_help()
    sys.exit(1)

# print(f" station: {sta}", file=sys.stderr)
# print(f" chanloc: {chanloc}", file=sys.stderr)
# print(f"start_dt: {start_dt.isoformat()}", file=sys.stderr)
# print(f"  end_dt: {end_dt.isoformat()}", file=sys.stderr)
# print(f"  arcdir: {arcdir}", file=sys.stderr)

chan = chanloc[:3]
loc = chanloc[3:]

msget(arcdir, sta, chan, loc, start_dt, end_dt, net=args.net, outfn=args.out)
