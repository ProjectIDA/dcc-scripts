#!/usr/bin/env python3

from datetime import datetime
import os
from functools import reduce

# import tkinter as tk
from tkinter import Tk, Frame, LabelFrame, Menu
from tkinter import Entry, Checkbutton, Label, Button, OptionMenu
from tkinter import IntVar, StringVar, BooleanVar, DoubleVar
from tkinter import GROOVE, FLAT, SUNKEN, NORMAL, DISABLED
from tkinter import font, filedialog, messagebox
from tkinter.messagebox import showerror

from os.path import exists, isfile, isdir, dirname  #abspath, normpath
from pathlib import Path
import yaml

from ida.tkui.entry_widgets import FloatEntry, BGERR, BGOK, BGGRAY
from ida.tkui.dialogs import AboutDialog

from ida.utils import load_yaml_file
from ida.instruments import SEISMOMETER_MODELS, INSTRUMENT_NOMINAL_GAINS, \
   Q330_GCALIB_FOR_SEIS, Q330_NOMINAL_GAIN, Q330_FIR_COEFFS


class ConfigModel():

    def __init__(self):

        self.config = {
            'process_lf': '',
            'lf_ms_file': '',
            'lf_qcal_file': '',
            'lf_cal_date': '',

            'process_hf': '',
            'hf_ms_file': '',
            'hf_qcal_file': '',
            'hf_cal_date': '',

            'station': '',
            'loc': '',
            'sensor_code': '',
            'sampling_rate': '',

            'ctbto_analysis': '',
            'q330_nom_sens': '',
            'q330_calib_factor': '',
            'sensor_nom_sens': '',
            'sensor_calib_factor_z': '',
            'sensor_calib_factor_1': '',
            'sensor_calib_factor_2': '',

            'nom_paz_dir': '',
            'cur_paz_dir': '',
        }

    @property
    def process_lf(self):
        return self.config['process_lf']
    @process_lf.setter
    def process_lf(self, value):
        self.config['process_lf'] = value

    @property
    def lf_ms_file(self):
        return self.config['lf_ms_file']
    @lf_ms_file.setter
    def lf_ms_file(self, value):
        self.config['lf_ms_file'] = value

    @property
    def lf_qcal_file(self):
        return self.config['lf_qcal_file']
    @lf_qcal_file.setter
    def lf_qcal_file(self, value):
        self.config['lf_qcal_file'] = value

    @property
    def lf_cal_date(self):
        return self.config['lf_cal_date']
    @lf_cal_date.setter
    def lf_cal_date(self, value):
        self.config['lf_cal_date'] = value

    @property
    def process_hf(self):
        return self.config['process_hf']
    @process_hf.setter
    def process_hf(self, value):
        self.config['process_hf'] = value

    @property
    def hf_ms_file(self):
        return self.config['hf_ms_file']
    @hf_ms_file.setter
    def hf_ms_file(self, value):
        self.config['hf_ms_file'] = value

    @property
    def hf_qcal_file(self):
        return self.config['hf_qcal_file']
    @hf_qcal_file.setter
    def hf_qcal_file(self, value):
        self.config['hf_qcal_file'] = value

    @property
    def hf_cal_date(self):
        return self.config['hf_cal_date']
    @hf_cal_date.setter
    def hf_cal_date(self, value):
        self.config['hf_cal_date'] = value

    @property
    def station(self):
        return self.config['station']
    @station.setter
    def station(self, value):
        self.config['station'] = value

    @property
    def loc(self):
        return self.config['loc']
    @loc.setter
    def loc(self, value):
        self.config['loc'] = value

    @property
    def sensor_code(self):
        return self.config['sensor_code']
    @sensor_code.setter
    def sensor_code(self, value):
        self.config['sensor_code'] = value

    @property
    def sampling_rate(self):
        return self.config['sampling_rate']
    @sampling_rate.setter
    def sampling_rate(self, value):
        self.config['sampling_rate'] = int(value)

    @property
    def ctbto_analysis(self):
        return self.config['ctbto_analysis']
    @ctbto_analysis.setter
    def ctbto_analysis(self, value):
        self.config['ctbto_analysis'] = value

    @property
    def q330_nom_sens(self):
        return self.config['q330_nom_sens']
    @q330_nom_sens.setter
    def q330_nom_sens(self, value):
        self.config['q330_nom_sens'] = float(value)

    @property
    def q330_calib_factor(self):
        return self.config['q330_calib_factor']
    @q330_calib_factor.setter
    def q330_calib_factor(self, value):
        self.config['q330_calib_factor'] = float(value)

    @property
    def sensor_nom_sens(self):
        return self.config['sensor_nom_sens']
    @sensor_nom_sens.setter
    def sensor_nom_sens(self, value):
        self.config['sensor_nom_sens'] = float(value)

    @property
    def sensor_calib_factor_z(self):
        return self.config['sensor_calib_factor_z']
    @sensor_calib_factor_z.setter
    def sensor_calib_factor_z(self, value):
        self.config['sensor_calib_factor_z'] = float(value)

    @property
    def sensor_calib_factor_1(self):
        return self.config['sensor_calib_factor_1']
    @sensor_calib_factor_1.setter
    def sensor_calib_factor_1(self, value):
        self.config['sensor_calib_factor_1'] = float(value)

    @property
    def sensor_calib_factor_2(self):
        return self.config['sensor_calib_factor_2']
    @sensor_calib_factor_2.setter
    def sensor_calib_factor_2(self, value):
        self.config['sensor_calib_factor_2'] = float(value)

    @property
    def nom_paz_dir(self):
        return self.config['nom_paz_dir']
    @nom_paz_dir.setter
    def nom_paz_dir(self, value):
        self.config['nom_paz_dir'] = value

    @property
    def cur_paz_dir(self):
        return self.config['cur_paz_dir']
    @cur_paz_dir.setter
    def cur_paz_dir(self, value):
        self.config['cur_paz_dir'] = value

    def load_file(self, yamlfn):
        self.config, ok = load_yaml_file(yamlfn)
        return self.config.copy(), ok

    def save_file(self, savefn):
        if self.config:
            yamltxt = yaml.dump(self.config, default_flow_style=False)
            with open(savefn, 'wt') as yfl:
                yfl.write('#\n# DO NOT EDIT THIS FILE UNKLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING\n')
                yfl.write('#\n# This must be a valid YAML file.\n#\n')
                yfl.write(yamltxt)

    def supported_seismometers(self):
        return sorted(SEISMOMETER_MODELS)

    def supported_sample_rates(self):
        return sorted(Q330_FIR_COEFFS.keys())

    def sensor_nominal(self, sensor_code):
        if sensor_code in INSTRUMENT_NOMINAL_GAINS:
            return INSTRUMENT_NOMINAL_GAINS[sensor_code]
        else:
            raise ValueError('Unsupported sensor model: ' + sensor_code)

    def q330_nominal(self, port):
        port = port.upper()
        if port in Q330_NOMINAL_GAIN:
            return Q330_NOMINAL_GAIN[port]
        else:
            raise ValueError('Invalid Q330 Port: ' + port)

class ConfigController():

    def __init__(self):
        self.model = ConfigModel()

    def load_config_from_file(self, filename):
        cfgdict, ok = self.model.load_file(filename)
        return cfgdict, ok

    def save_config_to_file(self, filename, config):
        if self.model:
            self.commit_changes(config)
            self.model.save_file(filename)

    def commit_changes(self, config):
        for key, val in config.items():
            estr = 'self.model.' + key + ' = val'
            exec(estr)

        self.model.process_lf = config['process_lf']
        self.model.lf_ms_file = config['lf_ms_file']
        self.model.lf_qcal_file = config['lf_qcal_file']
        self.model.lf_cal_date = config['lf_cal_date']
        self.model.process_hf = config['process_hf']
        self.model.hf_ms_file = config['hf_ms_file']
        self.model.hf_qcal_file = config['hf_qcal_file']
        self.model.hf_cal_date = config['hf_cal_date']
        self.model.station = config['station']
        self.model.loc = config['loc']
        self.model.sensor_code = config['sensor_code']
        self.model.sampling_rate = config['sampling_rate']
        self.model.ctbto_analysis = config['ctbto_analysis']
        self.model.q330_nom_sens = config['q330_nom_sens']
        self.model.sensor_nom_sens = config['sensor_nom_sens']
        self.model.q330_calib_factor = config['q330_calib_factor']
        self.model.sensor_calib_factor_z = config['sensor_calib_factor_z']
        self.model.sensor_calib_factor_1 = config['sensor_calib_factor_1']
        self.model.sensor_calib_factor_2 = config['sensor_calib_factor_2']
        self.model.nom_paz_dir = config['nom_paz_dir']
        self.model.cur_paz_dir = config['cur_paz_dir']


    def sensor_models(self):
        return self.model.supported_seismometers()

    def sampling_rates(self):
        return self.model.supported_sample_rates()


class Configurator():
    """ A Gui application with three buttons"""

    def __init__(self):
        """ Inititalization the frame"""
        self.appname = 'RB Analysis Configuration Editor'
        self.version = '1.0.0'
        self.version_date = 'October, 2016'

        self.root = Tk()
        self.root.config(width=900, height=710, padx=5, pady=5, bg=BGGRAY)
        self.root.rowconfigure(0, weight=1, minsize=360)
        self.root.columnconfigure(0, weight=1)
        self.root.resizable(width=False, height=False)

        self.tk_wids= {
            'process_lf': None,
            'lf_ms_file': None,
            'lf_cal_date': None,
            'process_hf': None,
            'hf_ms_file': None,
            'hf_cal_date': None,
            'station': None,
            'loc': None,
            'sensor_code': None,
            'sampling_rate': None,
            'ctbto_analysis': None,
            'sensor_calib_factor_z': None,
            'sensor_calib_factor_1': None,
            'sensor_calib_factor_2': None,
            'nom_paz_dir': None,
            'cur_paz_dir': None,
        }
        self.ctrl = ConfigController()

        self.most_recent_datadir = ''
        self.build_vars()
        self.set_defaults()
        self.setup_main_frm()

        # need to do this after setting up main form so tray lbl widget exists
        self.set_new_file(os.path.abspath('untitled.yaml'))
        self.set_modified(False)

        self.refresh_ui()

        self.root.protocol('WM_DELETE_WINDOW', self.exit)
        self.root.mainloop()

    def exit(self, event=None):
       if (not self.cfg_modified) or \
          messagebox.askyesno("Confirm Quit",
                              "You will lose unsaved changes.\n\nDo you wish to Quit?"):
           self.root.destroy()

    def refresh_ui(self):

        if not self.is_valid('sensor_code'):
            self.tk_wids['sensor_code'].config(bg=BGERR)
        else:
            self.tk_wids['sensor_code'].config(bg='#FFF')

        if not self.is_valid('sampling_rate'):
            self.tk_wids['sampling_rate'].config(bg=BGERR)
        else:
            self.tk_wids['sampling_rate'].config(bg='#FFF')

        do_ctbto = self.tk_vars['ctbto_analysis'].get()
        if do_ctbto :
            bg = BGOK if self.is_valid('sensor_calib_factor_z') else BGERR
            self.tk_wids['sensor_calib_factor_z'].config(state=NORMAL, bg=bg)
            bg = BGOK if self.is_valid('sensor_calib_factor_1') else BGERR
            self.tk_wids['sensor_calib_factor_1'].config(state=NORMAL)
            bg = BGOK if self.is_valid('sensor_calib_factor_2') else BGERR
            self.tk_wids['sensor_calib_factor_2'].config(state=NORMAL)
        else:
            self.tk_wids['sensor_calib_factor_z'].config(state=DISABLED, bg=BGOK)
            self.tk_wids['sensor_calib_factor_1'].config(state=DISABLED, bg=BGOK)
            self.tk_wids['sensor_calib_factor_2'].config(state=DISABLED, bg=BGOK)

        installed = self.tk_vars['process_lf'].get()
        if installed:
            bg = BGOK if self.is_valid('lf_ms_file') else BGERR
            self.tk_wids['lf_ms_file'].config(state=NORMAL, bg=bg)
            self.tk_wids['lf_ms_file_button'].config(state=NORMAL)
        else:
            self.tk_wids['lf_ms_file'].config(state=DISABLED, bg=BGGRAY)
            self.tk_wids['lf_ms_file_button'].config(state=DISABLED)

        installed = self.tk_vars['process_hf'].get()
        if installed:
            bg = BGOK if self.is_valid('hf_ms_file') else BGERR
            self.tk_wids['hf_ms_file'].config(state=NORMAL, bg=bg)
            self.tk_wids['hf_ms_file_button'].config(state=NORMAL)
        else:
            self.tk_wids['hf_ms_file'].config(state=DISABLED, bg=BGGRAY)
            self.tk_wids['hf_ms_file_button'].config(state=DISABLED, bg=BGGRAY)

        if not self.is_valid('nom_paz_dir'):
            self.tk_wids['nom_paz_dir'].config(bg=BGERR)
        else:
            self.tk_wids['nom_paz_dir'].config(bg=BGOK)
        if not self.is_valid('cur_paz_dir'):
            self.tk_wids['cur_paz_dir'].config(bg=BGERR)
        else:
            self.tk_wids['cur_paz_dir'].config(bg=BGOK)

    def set_modified(self, modified):
        self.cfg_modified = modified
        if modified:
           self.cur_file_lbl.config(fg='#B00')
        else:
           self.cur_file_lbl.config(fg='#0B0')

    def set_new_file(self, fname):
        self.set_modified(False)
        self.filename = Path(fname).name
        self.directory = os.path.dirname(fname)
        self.cur_file_lbl.config(text="File: " + fname)
        self.root.title(self.appname + ': ' + self.filename)

    def load_config(self, fname):
        fname = os.path.normpath(fname)

        config, ok = self.ctrl.load_config_from_file(fname)
        if ok:
            self.set_new_file(fname)
            self.load_values(config)
        else:
            showerror('Error loading config file.', 'There was an error reading or parsing the YAML configuration file.')

    def load_values(self, config):


        self.tk_vars['process_lf'].set(config['process_lf'])
        self.tk_vars['lf_ms_file'].set(config['lf_ms_file'])
        self.tk_vars['lf_qcal_file'].set(config['lf_qcal_file'])
        self.tk_vars['lf_cal_date'].set(config['lf_cal_date'])
        self.tk_vars['process_hf'].set(config['process_hf'])
        self.tk_vars['hf_ms_file'].set(config['hf_ms_file'])
        self.tk_vars['hf_qcal_file'].set(config['hf_qcal_file'])
        self.tk_vars['hf_cal_date'].set(config['hf_cal_date'])
        self.tk_vars['station'].set(config['station'])
        self.tk_vars['loc'].set(config['loc'])
        self.tk_vars['sensor_code'].set(config['sensor_code'].upper())
        self.tk_vars['sampling_rate'].set(config['sampling_rate'])
        self.tk_vars['ctbto_analysis'].set(config['ctbto_analysis'])
        self.tk_vars['q330_nom_sens'].set(config['q330_nom_sens'])
        self.tk_vars['q330_calib_factor'].set(config['q330_calib_factor'])
        self.tk_vars['sensor_nom_sens'].set(config['sensor_nom_sens'])
        self.tk_vars['sensor_calib_factor_z'].set(config['sensor_calib_factor_z'])
        self.tk_vars['sensor_calib_factor_1'].set(config['sensor_calib_factor_1'])
        self.tk_vars['sensor_calib_factor_2'].set(config['sensor_calib_factor_2'])
        self.tk_vars['nom_paz_dir'].set(config['nom_paz_dir'])
        self.tk_vars['cur_paz_dir'].set(config['cur_paz_dir'])

    def save_values(self):

        config = {}
        config['process_lf'] = self.tk_vars['process_lf'].get()
        config['lf_ms_file'] = self.tk_vars['lf_ms_file'].get()
        config['lf_qcal_file'] = self.tk_vars['lf_qcal_file'].get()
        config['lf_cal_date'] = self.tk_vars['lf_cal_date'].get()
        config['process_hf'] = self.tk_vars['process_hf'].get()
        config['hf_ms_file'] = self.tk_vars['hf_ms_file'].get()
        config['hf_qcal_file'] = self.tk_vars['hf_qcal_file'].get()
        config['hf_cal_date'] = self.tk_vars['hf_cal_date'].get()
        config['station'] = self.tk_vars['station'].get()
        config['loc'] = self.tk_vars['loc'].get()
        config['sensor_code'] = self.tk_vars['sensor_code'].get()
        config['sampling_rate'] = self.tk_vars['sampling_rate'].get()
        config['ctbto_analysis'] = self.tk_vars['ctbto_analysis'].get()
        config['q330_nom_sens'] = self.tk_vars['q330_nom_sens'].get()
        config['q330_calib_factor'] = self.tk_vars['q330_calib_factor'].get()
        config['sensor_nom_sens'] = self.tk_vars['sensor_nom_sens'].get()
        config['sensor_calib_factor_z'] = self.tk_vars['sensor_calib_factor_z'].get()
        config['sensor_calib_factor_1'] = self.tk_vars['sensor_calib_factor_1'].get()
        config['sensor_calib_factor_2'] = self.tk_vars['sensor_calib_factor_2'].get()
        config['nom_paz_dir'] = self.tk_vars['nom_paz_dir'].get()
        config['cur_paz_dir'] = self.tk_vars['cur_paz_dir'].get()

        return config

    def open_config_file(self):
        fname = filedialog.askopenfilename(initialdir='.',
                                           filetypes=[('YAML Config File', '*.yaml')],
                                           title='Open RB Analysis Configuration File')

        if fname:
            self.load_config(fname)
            self.set_new_file(fname)
            self.refresh_ui()

    def save_config_as(self):

        config_ok, errs = self.is_config_valid()
        if not config_ok:
            for err in errs:
                print(err)
            showerror('Configuration Errors',
                      'You must fix the following errors before saving this configuration. \n\n' + \
                      reduce(lambda x,y: x + '\n\n- ' + y, errs[1:], '- '+errs[0])
                     )
        else:
            fname = filedialog.asksaveasfilename(initialdir=self.directory, initialfile=self.filename,
                                                 filetypes=[('YAML Config File', '*.yaml')],
                                                 title='Save RB Analysis Configuration')

            if fname:
                config = self.save_values()
                self.ctrl.save_config_to_file(fname, config)
                self.set_new_file(fname)

    def save_config(self):

        config_ok, errs = self.is_config_valid()
        if not config_ok:
            #for err in errs:
            #    print(err)
            showerror('Configuration Errors',
                      'You must fix the following errors before saving this configuration. \n\n' + \
                      reduce(lambda x,y: x + '\n\n- ' + y, errs[1:], '- '+errs[0])
                     )
        else:
           config = self.save_values()
           if self.filename == 'untitled.yaml':
               fname = filedialog.asksaveasfilename(initialdir=self.directory, initialfile=self.filename,
                                                    filetypes=[('YAML Config File', '*.yaml')],
                                                    title='Save RB Analysis Configuration')
           else:
               fname = os.path.join(self.directory, self.filename)
           if fname:
              self.ctrl.save_config_to_file(fname, config)
              self.set_new_file(fname)

    def setup_main_frm(self):

        WIDTH = 860
        HEADFONT = font.Font(font='Helvetica 15 bold')
        LBLBOLD = font.Font(font='Helvetica 11 bold')
        FIXEDBOLDFONT = font.Font(family='Courier', size=10, weight='bold')


        self.menu_bar = Menu(self.root)
        file_menu = Menu(self.menu_bar)
        file_menu.add_command(label="About", command=self.show_about_dlg)
        file_menu.add_separator()
        file_menu.add_command(label='Open...', underline=0, command=self.open_config_file)
        file_menu.add_command(label='Save', underline=0, command=self.save_config)
        file_menu.add_command(label='Save As...', command=self.save_config_as)
        file_menu.add_separator()
        file_menu.add_command(label='Exit', command=self.exit)
        self.menu_bar.add_cascade(label="File", menu=file_menu)

        self.root.config(menu=self.menu_bar)
        self.main_frm = Frame(self.root, width=WIDTH, height=430, bg=BGGRAY)

        self.main_frm.grid(row=0, column=0, sticky='nw')
        self.main_frm.grid_propagate(0)
        self.main_frm.rowconfigure(0, weight=0, pad=5)
        self.main_frm.rowconfigure(1, weight=0, pad=5)
        self.main_frm.rowconfigure(2, weight=0, pad=5)
        self.main_frm.rowconfigure(3, weight=0, pad=5)

        title_frm = LabelFrame(self.main_frm, text='', bd=2, width=WIDTH, height=40,
            bg=BGGRAY, relief=FLAT, font=HEADFONT)
        title_frm.grid(row=0, column=0, sticky='nw')
        title_frm.grid_propagate(0)
        title_frm.columnconfigure(0, weight=1, uniform=1)
        title_frm.rowconfigure(0, weight=1)
        lbl = Label(title_frm, text=self.appname, font=HEADFONT, bg=BGGRAY)
        lbl.grid(row=0, column=0, sticky='n')

        file_frm = LabelFrame(self.main_frm, text=' Data & Directories ', bd=2, padx=5, pady=5,
                              width=WIDTH, height=160,
                              bg=BGGRAY, relief=GROOVE, font=HEADFONT)
        file_frm.grid(row=1, column=0)
        file_frm.grid_propagate(0)
        file_frm.columnconfigure(0, weight=4, minsize=200)
        file_frm.columnconfigure(1, weight=10)
        file_frm.columnconfigure(2, weight=1)

        self.tk_wids['process_lf'] = Checkbutton(file_frm, text='Analyze LF Data', bg=BGGRAY,
                                                           command=(lambda: self.process_clicked('lf')),
                                                           variable=self.tk_vars['process_lf'],
                                                           font=LBLBOLD, padx=5)
        self.tk_wids['process_lf'].grid(row=0, column=0, sticky='e')
        self.tk_wids['lf_ms_file'] = Entry(file_frm, font=FIXEDBOLDFONT, width=84,
                                            textvariable=self.tk_vars['lf_ms_file'])
        self.tk_wids['lf_ms_file'].grid(row=0, column=1, sticky='w')
        self.tk_wids['lf_ms_file_button'] = Button(file_frm, text='Select...', highlightbackground=BGGRAY,
                                                   command=(lambda: self.on_select_datafile_button(
                                                       'lf', self.tk_vars['lf_ms_file'])))
        self.tk_wids['lf_ms_file_button'].grid(row=0, column=2)

        self.tk_wids['process_hf'] = Checkbutton(file_frm, text='Analyze HF Data', bg=BGGRAY,
                                                           command=(lambda: self.process_clicked('hf')),
                                                           variable=self.tk_vars['process_hf'],
                                                           font=LBLBOLD, padx=5)
        self.tk_wids['process_hf'].grid(row=1, column=0, sticky='e')
        self.tk_wids['hf_ms_file'] = Entry(file_frm, font=FIXEDBOLDFONT, width=84,
                                            textvariable=self.tk_vars['hf_ms_file'])
        self.tk_wids['hf_ms_file'].grid(row=1, column=1, sticky='w')
        self.tk_wids['hf_ms_file_button'] = Button(file_frm, text='Select...', highlightbackground=BGGRAY,
                                                   command=(lambda: self.on_select_datafile_button(
                                                       'hf', self.tk_vars['hf_ms_file'])))
        self.tk_wids['hf_ms_file_button'].grid(row=1, column=2)

        Label(file_frm, text='Path to Nom P/Z files:',
              font=LBLBOLD, bg=BGGRAY, padx=5).grid(row=2, column=0, sticky='e')
        self.tk_wids['nom_paz_dir'] = Entry(file_frm, font=FIXEDBOLDFONT, width=84,
                                            textvariable=self.tk_vars['nom_paz_dir'])
        self.tk_wids['nom_paz_dir'].grid(row=2, column=1, sticky='w')
        self.tk_wids['nom_paz_dir_button'] = Button(file_frm, text='Select...', highlightbackground=BGGRAY,
                                                   command=(lambda: self.on_select_dir_button(
                                                       'nom_paz_dir', self.tk_vars['nom_paz_dir'])))
        self.tk_wids['nom_paz_dir_button'].grid(row=2, column=2)

        Label(file_frm, text='Path to Cur P/Z files:',
              font=LBLBOLD, bg=BGGRAY, padx=5).grid(row=3, column=0, sticky='e')
        self.tk_wids['cur_paz_dir'] = Entry(file_frm, font=FIXEDBOLDFONT, width=84,
                                            textvariable=self.tk_vars['cur_paz_dir'])
        self.tk_wids['cur_paz_dir'].grid(row=3, column=1, sticky='w')
        self.tk_wids['cur_paz_dir_button'] = Button(file_frm, text='Select...', highlightbackground=BGGRAY,
                                                   command=(lambda: self.on_select_dir_button(
                                                       'cur_paz_dir', self.tk_vars['cur_paz_dir'])))
        self.tk_wids['cur_paz_dir_button'].grid(row=3, column=2)

        sensor_frm = LabelFrame(self.main_frm, text=' Sensor Information ', padx=5, pady=5,
                                width=WIDTH, height=60, bg=BGGRAY, bd=2, relief=GROOVE, font=HEADFONT)
        sensor_frm.grid_propagate(0)
        sensor_frm.grid(row=2, column=0)
        sensor_frm.columnconfigure(0, weight=1, uniform='1')
        sensor_frm.columnconfigure(1, weight=1, uniform='1')
        sensor_frm.columnconfigure(2, weight=1, uniform='1')
        sensor_frm.columnconfigure(3, weight=1, uniform='1')
        Label(sensor_frm, text='Sensor Model:',
              bg=BGGRAY, font=LBLBOLD).grid(row=0, column=0, sticky='e')
        self.tk_wids['sensor_code'] = OptionMenu(sensor_frm, self.tk_vars['sensor_code'],
                                                 command=(lambda val: self.on_option_change(val,
                                                       'sensor_code', self.tk_vars['sensor_code'])),
                                                 *self.ctrl.sensor_models())
        self.tk_wids['sensor_code'].config(bg=BGGRAY)
        self.tk_wids['sensor_code'].grid(row=0, column=1, sticky='w')

        Label(sensor_frm, text='Operating Sample Rate:',
              bg=BGGRAY, font=LBLBOLD).grid(row=0, column=2, sticky='e')
        self.tk_wids['sampling_rate'] = OptionMenu(sensor_frm, self.tk_vars['sampling_rate'],
                                                   command=(lambda val: self.on_option_change(val,
                                                       'sampling_rate', self.tk_vars['sampling_rate'])),
                                                   *self.ctrl.sampling_rates())
        self.tk_wids['sampling_rate'].config(bg=BGGRAY)
        self.tk_wids['sampling_rate'].grid(row=0, column=3, sticky='w')

        ctbto_frm = LabelFrame(self.main_frm, text=' CTBTO Information ', padx=5, pady=5,
                               bg=BGGRAY, width=WIDTH, height=120, bd=2, relief=GROOVE,
                             font=HEADFONT)
        ctbto_frm.grid_propagate(0)
        ctbto_frm.grid(row=3, column=0)
        ctbto_frm.rowconfigure(0, weight=1)
        ctbto_frm.rowconfigure(1, weight=1)
        ctbto_frm.columnconfigure(0, weight=2, uniform='1')
        ctbto_frm.columnconfigure(1, weight=1, uniform='2')
        ctbto_frm.columnconfigure(2, weight=2, uniform='1')
        ctbto_frm.columnconfigure(3, weight=1, uniform='2')
        ctbto_frm.columnconfigure(4, weight=2, uniform='1')
        ctbto_frm.columnconfigure(5, weight=1, uniform='2')

        self.tk_wids['ctbto_analysis'] = Checkbutton(ctbto_frm, text='Perform CTBTO Analysis', bg=BGGRAY,
                                                           command=self.ctbto_clicked,
                                                           variable=self.tk_vars['ctbto_analysis'],
                                                           font=LBLBOLD, padx=5)
        self.tk_wids['ctbto_analysis'].grid(row=0, column=0, sticky='e')

        Label(ctbto_frm, text='Sensor Cal Factor - Z:',
              bg=BGGRAY, font=LBLBOLD).grid(row=1, column=0, sticky='e')
        self.tk_wids['sensor_calib_factor_z'] = FloatEntry(ctbto_frm, font=FIXEDBOLDFONT, width=7,
            textvariable=self.tk_vars['sensor_calib_factor_z'], state=DISABLED)
        self.tk_wids['sensor_calib_factor_z'].grid(row=1, column=1, sticky='w')

        Label(ctbto_frm, text='Sensor Cal Factor - 1:',
              bg=BGGRAY, font=LBLBOLD).grid(row=1, column=2, sticky='e')
        self.tk_wids['sensor_calib_factor_1'] = FloatEntry(ctbto_frm, font=FIXEDBOLDFONT, width=7,
            textvariable=self.tk_vars['sensor_calib_factor_1'], state=DISABLED)
        self.tk_wids['sensor_calib_factor_1'].grid(row=1, column=3, sticky='w')

        Label(ctbto_frm, text='Sensor Cal Factor - 2:',
              bg=BGGRAY, font=LBLBOLD).grid(row=1, column=4, sticky='e')
        self.tk_wids['sensor_calib_factor_2'] = FloatEntry(ctbto_frm, font=FIXEDBOLDFONT, width=7,
            textvariable=self.tk_vars['sensor_calib_factor_2'], state=DISABLED)
        self.tk_wids['sensor_calib_factor_2'].grid(row=1, column=5, sticky='w')

        tray_frm = LabelFrame(self.main_frm, text='', padx=5, pady=5,
                              width=WIDTH, height=28, bg='#EEE', bd=2,
                              font=HEADFONT, relief=SUNKEN)
        tray_frm.grid_propagate(0)
        tray_frm.grid(row=6, column=0, sticky='w')
        tray_frm.columnconfigure(0, weight=1)

        self.cur_file_lbl = Label(tray_frm, text='File:', bg='#EEE', font=FIXEDBOLDFONT)
        self.cur_file_lbl.grid(row=0, column=0, sticky='w')

        self.tk_wids['lf_ms_file'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['hf_ms_file'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['nom_paz_dir'].bind('<Any-KeyRelease>', self.keyrelease_handler)
        self.tk_wids['cur_paz_dir'].bind('<Any-KeyRelease>', self.keyrelease_handler)

    def show_about_dlg(self):
        about_hd = '{}\nVersion {}, {}'.format(Path(__file__).name.upper(),
                                               self.version, self.version_date)
        about_txt = 'Project IDA\n'
        about_txt += 'Random Binary Calibration\n'
        about_txt += 'Analysis Configuration Editor\n\n'

        about_txt += 'For use with Project IDA deployed GSN sensors and \n'
        about_txt += 'Kinametrics Q330HR digitizers.\n\n'

        about_txt += 'Developed by:\n\n'

        about_txt += 'Project IDA, Data Collection Center\n'
        about_txt += 'Institute of Geophysics and Planetary Physics\n'
        about_txt += 'Scripps Institution of Oceanography\n'
        about_txt += 'University of California, San Diego\n\n'

        about_txt += 'Copyright © 2016\n'
        about_txt += 'Regents of the University of California\n'
        # showinfo('About', about_txt)
        dlg = AboutDialog(self.root, about_head=about_hd, about_text=about_txt)
        dlg.wait_window()

    def ctbto_clicked(self):
        self.set_modified(True)
        self.refresh_ui()

    def on_option_change(self, val, varkey, var):
        print(str(val))
        if varkey == 'sensor_code':
            sensor = var.get()
            self.tk_vars['sensor_nom_sens'].set(INSTRUMENT_NOMINAL_GAINS[sensor])
            self.tk_vars['q330_calib_factor'].set(Q330_GCALIB_FOR_SEIS[sensor])
        self.set_modified(True)
        self.refresh_ui()

    def on_select_datafile_button(self, datatype, tkvar):

        if self.most_recent_datadir:
           rootdir = self.most_recent_datadir
        else:
           rootdir = os.environ.get('IDA_CAL_RAW_DIR', '.')

        datatype = datatype.upper()
        title = 'Select {} Random Binary miniseed file'.format(datatype.upper())

        fname = filedialog.askopenfilename(initialdir=rootdir,
                                           filetypes=[('Miniseed Files', '*.ms'), ('Miniseed Files', '*.seed')],
                                           title=title)

        if fname:
            if ('-rb' + datatype.lower() + '-') in fname:
               tkvar.set(fname)
               self.process_qcal_filename(datatype, fname)
               self.set_modified(True)
               self.refresh_ui()
               self.most_recent_datadir = dirname(fname)
            else:
               showerror('ERROR: Selecting MS File',
                         'This does not appear to be a ' + datatype.upper() + ' file.')

    def is_valid_qcal_filename(self, fname):

      ok = False
      if fname:
         name = Path(fname).stem
         parts = name.split('-')

         if len(parts) in [7, 8]:
            cal_ok = parts[0].upper() == 'CAL'
            digi_ok = (len(parts[1]) in [5,6]) and parts[1][-2:].isdigit()
            # skipping sensor segment, can't currently use
            if parts[3] == 'B':
               type_ok = parts[4].lower() in ['rblf', 'rbhf']
               year_ok = (len(parts[5]) == 4) and parts[5].isdigit()
               mmdd_ok = (len(parts[6]) == 4) and parts[6].isdigit()
            else:
               type_ok = parts[3].lower() in ['rblf', 'rbhf']
               year_ok = (len(parts[4]) == 4) and parts[4].isdigit()
               mmdd_ok = (len(parts[5]) == 4) and parts[5].isdigit()
            ok = cal_ok and digi_ok and type_ok and year_ok and mmdd_ok

      return ok

    def process_qcal_filename(self, datatype, fname):

        name = Path(fname).stem
        sta, loc, port, caltype, caldate, ok = self.parse_qcal_filename(name)
        if ok:
          self.tk_vars['station'].set(sta.upper())
          self.tk_vars['loc'].set(loc)
          self.tk_vars['sensor_port'].set(port.upper())
          if datatype.lower() == 'lf':
             self.tk_vars['lf_cal_date'].set(caldate)
             self.tk_vars['lf_qcal_file'].set(os.path.join(dirname(fname),
                                                          name + '.log'))
          else:
             self.tk_vars['hf_cal_date'].set(caldate)
             self.tk_vars['hf_qcal_file'].set(os.path.join(dirname(fname),
                                                          name + '.log'))
          self.update_sensitivities()

    def parse_qcal_filename(self, fname):

         sta, loc, port, caltype, caldate = '', '', '', '', ''
         ok = False
         if fname:
            name = Path(fname).name
            parts = name.split('-')
            if len(parts) in [7, 8]:
                sta = parts[1][:-2]
                loc = parts[1][-2:]
                if parts[3] == 'B':
                    port = 'B'
                    caltype = parts[4]
                    caldate = '{}-{}-{}'.format(parts[5], parts[6][:2], parts[6][2:])
                else:
                    port = 'A'
                    caltype = parts[3]
                    caldate = '{}-{}-{}'.format(parts[4], parts[5][:2], parts[5][2:])
                ok = True

         return sta, loc, port, caltype, caldate, ok

    def update_sensitivities(self):
        if self.is_valid('sensor_port'):
           port = self.tk_vars['sensor_port'].get()
           self.tk_vars['q330_nom_sens'].set(Q330_NOMINAL_GAIN[port])
        if self.is_valid('sensor_code'):
           sens = self.tk_vars['sensor_code'].get()
           self.tk_vars['sensor_nom_sens'].set(INSTRUMENT_NOMINAL_GAINS[sens])
           self.tk_vars['q330_calib_factor'].set(Q330_GCALIB_FOR_SEIS[sens])

    def on_select_dir_button(self, datatype, tkvar):
        if datatype.lower() == 'nom_paz_dir':
            if os.environ.get('IDA_RESPONSES_NOM_DIR'):
                rootdir = os.environ.get('IDA_RESPONSES_NOM_DIR')
            else:
                rootdir = '.'

            title = 'Select location of NOMINAL P/Z Files'
        elif datatype.lower() == 'cur_paz_dir':
            if os.environ.get('IDA_RESPONSES_CUR_DIR'):
                rootdir = os.environ.get('IDA_RESPONSES_CUR_DIR')
            else:
                rootdir = '.'

            title = 'Select location of CURRENT P/Z Files'

        dirname = filedialog.askdirectory(initialdir=rootdir, mustexist=True, title=title)

        if dirname:
            tkvar.set(dirname)
            self.set_modified(True)
            self.refresh_ui()

    def process_clicked(self, datatype):
        self.set_modified(True)
        self.refresh_ui()

    def build_vars(self):
        self.tk_vars = {
            'process_lf': BooleanVar(),
            'lf_ms_file': StringVar(),
            'lf_qcal_file': StringVar(),
            'lf_cal_date': StringVar(),
            'process_hf': BooleanVar(),
            'hf_ms_file': StringVar(),
            'hf_qcal_file': StringVar(),
            'hf_cal_date': StringVar(),
            'station': StringVar(),
            'loc': StringVar(),
            'sensor_port': StringVar(),
            'sensor_code': StringVar(),
            'sampling_rate': IntVar(),
            'ctbto_analysis': BooleanVar(),
            'q330_nom_sens': DoubleVar(),
            'q330_calib_factor': StringVar(),
            'sensor_nom_sens': StringVar(),
            'sensor_calib_factor_z': DoubleVar(),
            'sensor_calib_factor_1': DoubleVar(),
            'sensor_calib_factor_2': DoubleVar(),
            'nom_paz_dir': StringVar(),
            'cur_paz_dir': StringVar(),
        }

    def keyrelease_handler(self, event):
        if event.widget == self.tk_wids['lf_ms_file']:
            self.set_modified(True)
            self.process_qcal_filename('lf', self.tk_vars['lf_ms_file'].get())
        elif event.widget == self.tk_wids['hf_ms_file']:
            self.set_modified(True)
            self.process_qcal_filename('hf', self.tk_vars['hf_ms_file'].get())

        self.refresh_ui()

    def set_defaults(self):
        config = {}
        config['process_lf'] = True
        config['lf_ms_file'] = ''
        config['lf_qcal_file'] = ''
        config['lf_cal_date'] = ''
        config['process_hf'] = True
        config['hf_ms_file'] = ''
        config['hf_qcal_file'] = ''
        config['hf_cal_date'] = ''
        config['station'] = ''
        config['loc'] = ''
        config['sensor_code'] = ''
        config['sensor_port'] = 'A'
        config['sampling_rate'] = 0
        config['ctbto_analysis'] = False
        config['q330_nom_sens'] = 1.0
        config['q330_calib_factor'] = 1.0
        config['sensor_nom_sens'] = 1.0
        config['sensor_calib_factor_z'] = 1.0
        config['sensor_calib_factor_1'] = 1.0
        config['sensor_calib_factor_2'] = 1.0
        config['nom_paz_dir'] = ''
        config['cur_paz_dir'] = ''
        self.load_values(config)

    def is_valid(self, varkey):

        if varkey == 'sensor_code':
            return self.tk_vars[varkey].get() in self.ctrl.sensor_models()
        elif varkey == 'sampling_rate':
            return self.tk_vars[varkey].get() in self.ctrl.sampling_rates()
        elif varkey == 'sensor_port':
            return self.tk_vars[varkey].get() in ['A', 'B']

        elif varkey == 'process_lf':
            return True  # this really can't be 'invalid'
        elif varkey == 'process_hf':
            return True

        elif varkey == 'lf_ms_file':
            if self.tk_vars['process_lf'].get():
                lf_ms_file = self.tk_vars[varkey].get()
                return lf_ms_file and exists(lf_ms_file) and isfile(lf_ms_file) and \
                   (Path(lf_ms_file).suffix.lower() in ['.ms', '.seed']) and \
                   self.is_valid_qcal_filename(lf_ms_file)

            else:
                return True
        elif varkey == 'lf_cal_date':
            if self.tk_vars['process_lf'].get():
                cal_date = self.tk_vars[varkey].get()
                try:
                    datetime.strptime(cal_date, '%Y-%m-%d')
                except:
                    return False
                else:
                    return True
            else:
                return True

        elif varkey == 'hf_ms_file':
            if self.tk_vars['process_hf'].get():
                ms_file = self.tk_vars[varkey].get()
                return ms_file and exists(ms_file) and isfile(ms_file) and \
                   (Path(ms_file).suffix.lower() in ['.ms', '.seed']) and \
                   self.is_valid_qcal_filename(ms_file)
            else:
                return True
        elif varkey == 'hf_cal_date':
            if self.tk_vars['process_hf'].get():
                cal_date = self.tk_vars[varkey].get()
                try:
                    datetime.strptime(cal_date, '%Y-%m-%d')
                except:
                    return False
                else:
                    return True
            else:
                return True

        elif varkey == 'ctbto_analysis':
            return True
        elif varkey == 'sensor_calib_factor_z':
            ctbto_analysis = self.tk_vars['ctbto_analysis'].get()
            if ctbto_analysis:
                return self.tk_vars[varkey].get() > 0
            else:
                return True
        elif varkey == 'sensor_calib_factor_1':
            ctbto_analysis = self.tk_vars['ctbto_analysis'].get()
            if ctbto_analysis:
                return self.tk_vars[varkey].get() > 0
            else:
                return True
        elif varkey == 'sensor_calib_factor_2':
            ctbto_analysis = self.tk_vars['ctbto_analysis'].get()
            if ctbto_analysis:
                return self.tk_vars[varkey].get() > 0
            else:
                return True

        elif varkey in ['nom_paz_dir', 'cur_paz_dir']:
            path = self.tk_vars[varkey].get()
            return path and exists(path) and isdir(path)

        else:
            raise ValueError('Invalid VARKEY: ' + varkey)

    def is_config_valid(self):

        errmsgs = []
        if not self.is_valid('sensor_code'):
            errmsgs.append('INVALID Sensor Code specified: [{}]'.format(self.tk_vars['sensor_code'].get()))
        if not self.is_valid('sampling_rate'):
            errmsgs.append('INVALID Sampling Rate specified: [{}]'.format(self.tk_vars['sampling_rate'].get()))

        process_lf = self.tk_vars['process_lf'].get()
        if process_lf:
            lf_ms_file = self.tk_vars['lf_ms_file'].get()
            if not lf_ms_file:
                errmsgs.append('Missing the LF MS file path.')
            elif not exists(lf_ms_file):
                errmsgs.append('LF MS file does not exist:' + lf_ms_file)

        process_hf = self.tk_vars['process_hf'].get()
        if process_hf:
            hf_ms_file = self.tk_vars['hf_ms_file'].get()
            if not hf_ms_file:
                errmsgs.append('Missing the HF MS file path.')
            elif not exists(hf_ms_file):
                errmsgs.append('HF MS file does not exist:' + hf_ms_file)

        ctbto_analysis = self.tk_vars['ctbto_analysis'].get()
        if ctbto_analysis:
            sensor_calib_factor_z = self.tk_vars['sensor_calib_factor_z'].get()
            if (sensor_calib_factor_z < 0):
                errmsgs.append('Sensor Calib (Z) factor must be > 0.0.')
            sensor_calib_factor_1 = self.tk_vars['sensor_calib_factor_1'].get()
            if (sensor_calib_factor_1 < 0):
                errmsgs.append('Sensor Calib (1) factor must be > 0.0.')
            sensor_calib_factor_2 = self.tk_vars['sensor_calib_factor_2'].get()
            if (sensor_calib_factor_2 < 0):
                errmsgs.append('Sensor Calib (2) factor must be > 0.0.')

            if not process_lf or not process_hf:
                errmsgs.append('Generation of CTBTO results requires both LF and HF data analysis.')

        nom_paz_dir = self.tk_vars['nom_paz_dir'].get()
        if not nom_paz_dir:
            errmsgs.append('Missing Nominal P/Z Directory.')
        elif not exists(nom_paz_dir):
            errmsgs.append('Nominal P/Z directory does not exist: ' + nom_paz_dir)

        cur_paz_dir = self.tk_vars['cur_paz_dir'].get()
        if not cur_paz_dir:
            errmsgs.append('Missing Current P/Z Directory.')
        elif not exists(cur_paz_dir):
            errmsgs.append('Current P/Z directory does not exist: ' + cur_paz_dir)

        return len(errmsgs) == 0, errmsgs


app = Configurator()
