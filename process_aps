#!/usr/bin/env python3
"""Process APSurvey onsite calibration data"""
#######################################################################################
# Copyright (C) 2016  Regents of the University of California
#
# This is free software: you can redistribute it and/or modify it under the terms of
# the GNU General Public License (GNU GPL) as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# A copy of the GNU General Public License can be found in LICENSE.TXT in the root of
# the source code repository. It can also be found at http://www.gnu.org/licenses/
#
# NOTES: Per GNU GPLv3 terms:
#   * This notice must be kept in this source file
#   * Changes to the source must be clearly noted with date & time of change
#
# If you use this software in a product, an explicit acknowledgment in the product
# documentation of the contribution by Project IDA, Institute of Geophysics and
# Planetary Physics, UCSD would be appreciated but is not required.
#######################################################################################
import argparse
from pathlib import Path
import logging
import datetime
import os.path

from fabulous.color import red, bold, blue

# set up logging
class ConsoleLogFilter(logging.Filter):
    """Custom console log filter to add colors to msgs"""
    def filter(self, record):
        if record.levelno == logging.WARN:
            record.msg = red(record.msg)
        elif record.levelno >= logging.ERROR:
            record.msg = red(bold(record.msg))
        return True

def setup_logging(log_file=(__file__ + '.log'), debug=False):
    """Set up logging for APSurvey processing"""

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)  # allow control via handler(s)

    fmtr = logging.Formatter('%(name)s %(asctime)s %(levelname)s: %(message)s')

    conhndlr = logging.StreamHandler()
    conhndlr.setFormatter(fmtr)
    if debug:
        conhndlr.setLevel(logging.DEBUG)
    else:
        conhndlr.setLevel(logging.WARN)
    logger.addHandler(conhndlr)
    conhndlr.addFilter(ConsoleLogFilter())

    fhndlr = logging.FileHandler(log_file)
    fhndlr.setFormatter(fmtr)
    fhndlr.setLevel(logging.DEBUG)
    logger.addHandler(fhndlr)


def main():
    """Script main function"""

    # TODO: TEST bad response behavior
    # TODO: Add ref_respfile to APSurvey to accept CLI respfile name
    #       and check for respfile before constructing from trace metadata
    # TODO: Dpcument ENV VARS REQUIRED here

    version = '1.0.0'
    parser = argparse.ArgumentParser(description="Process APSurvey calibration data.")
    parser.add_argument('config', action="store", help="Configuration file (YAML)")
    parser.add_argument('--only', action="store", default='both',
                        choices=['azi', 'abs', 'both'],
                        help="Dataset to analyze even if both are enabled in config file.")
    parser.add_argument('--cal-raw-dir', action='store', default=os.environ.get('IDA_CAL_RAW_DIR'),
                        help='Root directory of the raw calibration data. Value of env var ' + \
                        '$IDA_CAL_RAW_DIR is the default.')
    parser.add_argument('--resp-file-dir', action='store', default=os.environ.get('SEEDRESP'),
                        help='Directory containing SEED RESP files. Value of env var $SEEDRESP is the default.')
    parser.add_argument('--arc-raw-dir', action='store', default=os.environ.get('IDA_ARCHIVE_RAW_DIR'),
                        help='Root directory of file structure for raw IDA10 data. ' + \
                        'Value of env var $IDA_ARCHIVE_RAW_DIR is the default.')
    parser.add_argument('-v', '--version', action='version', version=version)
    parser.add_argument('-d', '--debug', action='store_true',
                        help='Enable DEBUG mode for verbose output.')

    args = parser.parse_args()

    cfg_fn = args.config
    if args.only == 'both':
        datasets = ['abs', 'azi']
    else:
        datasets = [args.only]

    debug = args.debug
    cal_raw_dir = args.cal_raw_dir
    resp_file_dir = args.resp_file_dir
    arc_raw_dir = args.arc_raw_dir

    # check env for required vars
    env_ok = True
    if (not cal_raw_dir):
        print(red(bold('The root directory of raw calibration data must be specified with --cal-raw-dir ' + \
                       'or by setting the IDA_CAL_RAW_DIR environment variable. ' + \
                       'Within this root directory a "shaketable" subdirectory is assumed.')))
        env_ok = False

    if (not resp_file_dir):
        print(red(bold('The location of the sensor RESP files must be specified with ' + \
                       '--resp-file-dir or by setting the SEEDRESP environment variable.')))
        env_ok = False

    if (not arc_raw_dir):
        print(red(bold('The root directory of IDA10 raw data must be specified with --arc-raw-dir ' + \
                       'or by setting the IDA_ARCHIVE_RAW_DIR environment variable. ')))
        env_ok = False


    if not env_ok:
        print(red('Quitting due to incomplete environment.'))
    else:

        from ida.calibration.absolute import APSurvey

        logfile = __file__ + '.log'
        setup_logging(log_file=logfile, debug=debug)
        logger = logging.getLogger(__file__.upper())
        logger.info('='*72)

        config = APSurvey(cfg_fn, cal_raw_dir, resp_file_dir, arc_raw_dir)

        if not config.ok:
            logger.error('Quitting due to error in configuration.')
        else:
            logger.info('Starting APSurvey analysis: ' + config.analdate)

            for ds in datasets:
                if config.dataset_enabled(ds):
                    sumfn, detfn, wf_files = config.analyze(ds)
                    if sumfn:
                        info = '\n{} Analysis saved in current working dir:\n'.format(ds.upper())
                        print(bold(info))
                        print(blue('    Summary results: ' + Path(os.path.abspath(sumfn)).name))
                        print(blue('   Detailed results: ' + Path(os.path.abspath(detfn)).name))
                        print(blue('           Log file: ' + logfile))
                        print(blue(bold('   Station sensor data files: ')))
                        for fname in config.waveform_files:
                            print(blue('                     ' + Path(fname).name))
                        logger.info('    Summary results: ' + os.path.abspath(sumfn))
                        logger.info('   Detailed results: ' + os.path.abspath(detfn))
                        logger.info('           Log file: ' + logfile)
                        logger.info('Station sensor data files: ')
                        for fname in wf_files:
                            logger.info('   ' + Path(fname).name)
                    else:
                        logger.error(ds.upper()+': Error performing analysis. No results returned.')

        logger.info('Exiting: ' + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        logger.info('='*72)

if __name__ == '__main__':
    main()
