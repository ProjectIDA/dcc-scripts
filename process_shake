#!/usr/bin/env python3
#######################################################################################################################
# Copyright (C) 2016  Regents of the University of California
#
# This is free software: you can redistribute it and/or modify it under the terms of the
# GNU General Public License (GNU GPL) as published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# A copy of the GNU General Public License can be found in LICENSE.TXT in the root of the source code repository.
# Additionally, it can be found at http://www.gnu.org/licenses/.
#
# NOTES: Per GNU GPLv3 terms:
#   * This notice must be kept in this source file
#   * Changes to the source must be clearly noted with date & time of change
#
# If you use this software in a product, an explicit acknowledgment in the product documentation of the contribution
# by Project IDA, Institute of Geophysics and Planetary Physics, UCSD would be appreciated but is not required.
#######################################################################################################################
import os
#from os.path import join
import argparse
import sys
import logging
import datetime

from fabulous.color import red, green, bold


version = '1.0.0'
parser = argparse.ArgumentParser(description="Analyze Compact Trillium shake table data.")
parser.add_argument('config', action="store", help="Configuration file (YAML)")
parser.add_argument('--cal-raw-dir', action='store', default=os.environ.get('IDA_CAL_RAW_DIR'),
                    help='Root directory of the raw calibration data. Value of env var ' + \
                    '$IDA_CAL_RAW_DIR is the default.')
parser.add_argument('--resp-file-dir', action='store', default=os.environ.get('SEEDRESP'),
                    help='Directory containing SEED RESP files. Value of env var $SEEDRESP is the default.')
parser.add_argument('--shaketable-subdir', action='store', default='shaketable',
                    help='Subdirectory of CAL_RAW_DIR containing shake table data ' + \
                    'directories. "shaketable" is the default.')
parser.add_argument('-v', '--version', action='version', version=version)
parser.add_argument('-d', '--debug', action='store_true', help='Enabled debug mode for verbose output.')

args = parser.parse_args()
debug = args.debug
config_file = args.config
cal_raw_dir = args.cal_raw_dir
resp_file_dir = args.resp_file_dir
shaketable_subdir = args.shaketable_subdir

if not '.yaml' in config_file:
   config_file += '.yaml'

if (not cal_raw_dir):
    print(red(bold('The root directory of raw calibration data must be specified with --cal-raw-dir ' + \
                   'or by setting the IDA_CAL_RAW_DIR environment variable. ' + \
                   'Within this root directory a "shaketable" subdirectory is assumed.')))
    sys.exit(1)

if (not resp_file_dir):
    print(red(bold('The location of the sensor RESP files must be specific with --resp-file-dir ' + \
                   'or by setting the SEEDRESP environment variable.')))
    sys.exit(1)

# set up logging
class ConsoleLogFilter(logging.Filter):

   def filter(self, record):
      if record.levelno == logging.WARN:
         record.msg = red(record.msg)
      elif record.levelno == logging.DEBUG:
         record.msg = green(bold(record.msg))
      elif record.levelno >= logging.ERROR:
         record.msg = red(bold(record.msg))
      return True


logfile = os.path.abspath(__file__ + '.log')
# set up logging to file - see previous section for more details
logging.basicConfig(level=logging.DEBUG, 
                    format='%(asctime)s %(name)s %(levelname)s %(message)s',
                    datefmt='%m-%d %H:%M:%S',
                    filename=logfile,
                    filemode='w')

chndlr = logging.StreamHandler()
if debug:
    chndlr.setLevel(logging.DEBUG)
else:
    chndlr.setLevel(logging.WARN)
confmtr = logging.Formatter('%(levelname)s: %(message)s')
chndlr.setFormatter(confmtr)
chndlr.addFilter(ConsoleLogFilter())

logging.getLogger('').addHandler(chndlr)
logger = logging.getLogger('SHAKETABLE')

#   logger.setLevel(logging.DEBUG)  # allow control via handler(s)
#   fhndlr = logging.FileHandler(logfile)
#   fhndlr.setLevel(logging.DEBUG)
#   filefmtr = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s: %(message)s')
#   fhndlr.setFormatter(filefmtr)
#   logger.addHandler(fhndlr)
#   logger.addHandler(chndlr)

logger.info('='*72)
logger.info('Starting Shaketable analysis: ' + \
            datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

from ida.calibration.shaketable import ShakeConfig

config = ShakeConfig(config_file, cal_raw_dir, resp_file_dir,
                     shaketable_subdir=shaketable_subdir, debug=debug, logger=logger)

if config.ok:
     if not config.read_msfile():
        logger.critical('Error reading miniseed file: ' + config.ms_filename)
        sys.exit(1)

     if not config.prepare_traces():
        logger.critical('Could not prepare traces. Quitting.')
        sys.exit(1)

     plot_fns, ms_fns, resfn = config.analyze()

     for fname in plot_fns:
         print(fname)
     print(ms_fns)
     print(resfn)
     done = input('Hit enter to exit...')

else:
   logger.critical('Quitting due to problems with configuration or environment.')

logger.info('Exiting: ' + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
logger.info('='*72)

