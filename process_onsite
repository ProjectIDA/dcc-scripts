#!/usr/bin/env python3
"""Process APSurvey onsite calibration data"""
#######################################################################################
# Copyright (C) 2016  Regents of the University of California
#
# This is free software: you can redistribute it and/or modify it under the terms of
# the GNU General Public License (GNU GPL) as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# A copy of the GNU General Public License can be found in LICENSE.TXT in the root of
# the source code repository. It can also be found at http://www.gnu.org/licenses/
#
# NOTES: Per GNU GPLv3 terms:
#   * This notice must be kept in this source file
#   * Changes to the source must be clearly noted with date & time of change
#
# If you use this software in a product, an explicit acknowledgment in the product
# documentation of the contribution by Project IDA, Institute of Geophysics and
# Planetary Physics, UCSD would be appreciated but is not required.
#######################################################################################
import argparse
#import sys
import logging
import datetime
import os.path

from fabulous.color import red, bold, blue

# set up logging
class ConsoleLogFilter(logging.Filter):
    """Custom console log filter to add colors to msgs"""
    def filter(self, record):
        if record.levelno == logging.WARN:
            record.msg = red(record.msg)
        elif record.levelno >= logging.ERROR:
            record.msg = red(bold(record.msg))
        return True

def setup_logging(logger_name='', log_file=(__file__ + '.log'), debug=False):
    """Set up logging for APSurvey processing"""

    logger = logging.getLogger(logger_name)
    logger.setLevel(logging.DEBUG)  # allow control via handler(s)
    confmtr = logging.Formatter('%(levelname)s: %(message)s')
    hndlr = logging.StreamHandler()
    hndlr.setFormatter(confmtr)
    if debug:
        hndlr.setLevel(logging.DEBUG)
    else:
        hndlr.setLevel(logging.WARN)

    filefmtr = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s: %(message)s')
    fhndlr = logging.FileHandler(log_file)
    fhndlr.setFormatter(filefmtr)
    fhndlr.setLevel(logging.DEBUG)
    logger.addHandler(fhndlr)

    logger.addHandler(hndlr)
    hndlr.addFilter(ConsoleLogFilter())

    return logger

def check_env(envvars):
    """Checks list of env vars toi see if set"""

    vars_stat = []
    for var in envvars:
        okay = os.environ.get(var) != None
        vars_stat.append((var, okay))
    return vars_stat

def main():
    """Script main function"""

    # TODO: TEST bad response behavior
    # TODO: Add ref_respfile to APSurvey to accept CLI respfile name
    #       and check for respfile before constructing from trace metadata
    # TODO: Dpcument ENV VARS REQUIRED here

    version = '0.1.0'
    parser = argparse.ArgumentParser(description="Process APSurvey calibration data.")
    parser.add_argument('dataset', action="store", default='', choices=['azi', 'abs'],
                        help="Dataset to analyze. Must be set up in configuration file.")
    parser.add_argument('-c', '--config_file', action="store", default="process_onsite.yaml",
                        help="configuration file (yaml).")
    # parser.add_argument('-r', '--resp-file', action="store", default="",
    #                     help="RESP filename for reference sensor located in $SEEDRESP directory.")
    parser.add_argument('-v', '--version', action='version', version=version)
    parser.add_argument('-d', '--debug', action='store_true',
                        help='Enable DEBUG mode for verbose output.')

    args = parser.parse_args()

    cfg_fn = args.config_file
    dataset = args.dataset
    debug = args.debug

    logfile = os.path.abspath(__file__ + '.log')
    logger = setup_logging('APSurvey', log_file=logfile, debug=debug)

    # check env for required vars
    env_ok = True
    vars_stat = check_env(['IDA_CAL_RAW_DIR',
                           'IDA_ARCHIVE_RAW_DIR',
                           'SEEDRESP'])
    for avar, isset in vars_stat:
        if not isset:
            env_ok = False
            print(red('The env var [{}] must be set.'.format(avar)))
            if logger:
                logger.error('The env var [{}] must be set.'.format(avar))

    if not env_ok:
        logger.critical('Quitting due to missing environment variables.')
        print(red('Quitting due to missing environment variables.'))
    else:

        from ida.calibration.absolute import APSurvey

        logger.info('='*72)
        logger.info('Starting APSurvey analysis: ' +
                    datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

        config = APSurvey(cfg_fn,
                          os.environ['IDA_CAL_RAW_DIR'],
                          os.environ['SEEDRESP'],
                          logger=logger)

        if not config.ok:
            logger.critical('Quitting due to error in configuration.')
        else:
            sumfn, detfn = config.analyze(dataset)
            if sumfn:
                print(bold(blue('Saved in current working directory:')), '\n')
                print(blue('    Summary results: ' + os.path.abspath(sumfn)))
                print(blue('   Detailed results: ' + os.path.abspath(detfn)))
                print(blue('           Log file: ' + logfile))
                logger.info('    Summary results: ' + os.path.abspath(sumfn))
                logger.info('   Detailed results: ' + os.path.abspath(detfn))
                logger.info('           Log file: ' + logfile)
            else:
                logger.error('Error performing analysis. No results returned.')

        logger.info('Exiting: ' + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        logger.info('='*72)

if __name__ == '__main__':
    main()
