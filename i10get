#!/usr/bin/env python3
#######################################################################################################################
# Copyright (C) 2016  Regents of the University of California
#
# This is free software: you can redistribute it and/or modify it under the terms of the
# GNU General Public License (GNU GPL) as published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# A copy of the GNU General Public License can be found in LICENSE.TXT in the root of the source code repository.
# Additionally, it can be found at http://www.gnu.org/licenses/.
#
# NOTES: Per GNU GPLv3 terms:
#   * This notice must be kept in this source file
#   * Changes to the source must be clearly noted with date & time of change
#
# If you use this software in a product, an explicit acknowledgment in the product documentation of the contribution
# by Project IDA, Institute of Geophysics and Planetary Physics, UCSD would be appreciated but is not required.
#######################################################################################################################
import argparse
import os
import sys
import datetime

from fabulous.color import red, green, bold

from ida.utils import i10get


version = '1.1.0'
parser = argparse.ArgumentParser(description="Retrieve IDA10 raw data from IDA archives for arbitrary range of days. " +
                                             "Output is sent to STDOUT.")
parser.add_argument('station', action="store", default='',
                    help="Station code for which data should be retrieved (case insensitive).")
parser.add_argument('chanloc_list', action='store', help="Comma saperated list of CHANLOC codes (e.g. bhz00) " +
                                                     "as expected by idagrep (case insensitive).", default = '')
parser.add_argument('start', action="store", default='',
                    help="START time in either  YYYY-JJJ  or  YYYY-MM-DD formats. ")
parser.add_argument('end', action="store", default='',
                    help="END time in either  YYYY-JJJ  or  YYYY-MM-DD formats. ")
parser.add_argument('-v', '--version', action='version', version=version)

args = parser.parse_args()

sta = args.station.lower()
chan_list = args.chanloc_list.lower()

# validate chan_list
for chn in chan_list.split(','):
    # print(chn)
    if (len(chn) != 5):
        print(red(bold('FATAL ERROR: Invalid chanloc_list {}. Each channel must include the location code, e.g. bhz00.'.format(chan_list))),
              file = sys.stderr)
        sys.exit(1)

# check date param formats. Allow date without times
start_t = args.start
try:
    if len(start_t) == 8:
        start_datetime = datetime.datetime.strptime(start_t, '%Y-%j')
    elif len(start_t) == 10:
        start_datetime = datetime.datetime.strptime(start_t, '%Y-%m-%d')
    else:
        print(red(bold('FATAL ERROR parsing START time: {}. '.format(start_t))), file=sys.stderr)
        args.print_help()
        sys.exit(1)
except:
    print(red(bold('FATAL ERROR parsing START time: {}. '.format(start_t))), file=sys.stderr)
    args.print_help()
    sys.exit(1)

end_t = args.end
try:
    if len(end_t) == 8:
        end_datetime = datetime.datetime.strptime(end_t, '%Y-%j')
    elif len(end_t) == 10:
        end_datetime = datetime.datetime.strptime(end_t, '%Y-%m-%d')
    else:
        print(red(bold('FATAL Error parsing END time: {}. '.format(end_t))), file=sys.stderr)
        args.print_help()
        sys.exit(1)

except:
    print(red(bold('FATAL Error parsing END time: {}. '.format(end_t))), file=sys.stderr)
    args.print_help()
    sys.exit(1)

if start_datetime > datetime.datetime.utcnow():
    print(red(bold("FATAL ERROR: START time can not be in the future. Maybe tomorrow you'll have better luck.")),
          file = sys.stderr)
    sys.exit(1)

if end_datetime > datetime.datetime.utcnow():
    print(red(bold('WARNING: END time can not be in the future. Time travel not yet implemented. Setting END to NOW.')),
          file = sys.stderr)
    end_datetime = datetime.datetime.utcnow()

if start_datetime > end_datetime:
    print(red(bold("FATAL ERROR: START time can not be after the END time. That's just whacky.")),
          file = sys.stderr)
    sys.exit(1)

# print('Retrieving STA={}, CHN={} from {} through {}:'.format(sta, chan_list, start_datetime.strftime('%Y-%m-%d'), end_datetime.strftime('%Y-%m-%d')),
#       file=sys.stderr)

# now lets get to business...
# FINALLY, lets get i10 data
i10get(sta, chan_list, start_datetime, end_datetime)

